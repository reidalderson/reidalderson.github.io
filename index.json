[{"authors":["admin"],"categories":null,"content":"I am a Banting Postdoctoral Fellow in Prof. Lewis Kay\u0026rsquo;s research group at the University of Toronto. My research focuses on understanding the molecular and structural details of protein quality control. I apply biochemical and biophysical tools, including NMR spectroscopy, to investigate the regulation and mechanisms of molecular chaperones and proteases involved in cellular homeostasis\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a Banting Postdoctoral Fellow in Prof. Lewis Kay\u0026rsquo;s research group at the University of Toronto. My research focuses on understanding the molecular and structural details of protein quality control.","tags":null,"title":"Reid Alderson","type":"authors"},{"authors":null,"categories":null,"content":"Add any content to the body of the section here.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"92695792219db305742cfc7a52185761","permalink":"/landing/test/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/landing/test/","section":"landing","summary":"Add any content to the body of the section here.","tags":null,"title":"Hello","type":"landing"},{"authors":[],"categories":["code","python","NMR"],"content":"\r\rPulse length and power calculator\rGiven the known pulse width (τp,1) at a particular power level (PL1), one can calculate the corresponding pulse width (τp,2) at any desired power level (PL2). Likewise, one can calculate the required power level to achieve a desired pulse width, given a known pulse width at a particular power level. The two calculators below perform these conversions.\nFirst, please select the type of spectrometer that you are using. This dictates the sign of the power level: Bruker (Varian) increases power levels with decreasing (increasing) dB values.\nfunction power_level(pw1, pl1, pw2, scale) {\rreturn 20*Math.log10(pw1/pw2) + scale*pl1\r} function pulse_width(pw1, pl1, pl2) {\rreturn (1*pw1)/(10**((pl2-pl1)/20)) }\rfunction check() {\rif(document.getElementById('bruker_radio').checked) {\rdocument.getElementById(\"power_pw1\").value=10;\rdocument.getElementById(\"power_pl1\").value=-12;\rdocument.getElementById(\"power_pw2\").value=20;\rdocument.getElementById(\"pulse_pw1\").value=10;\rdocument.getElementById(\"pulse_pl1\").value=-12;\rdocument.getElementById(\"pulse_pl2\").value=-6;\r} else if(document.getElementById('varian_radio').checked) {\rdocument.getElementById(\"power_pw1\").value=10;\rdocument.getElementById(\"power_pl1\").value=63;\rdocument.getElementById(\"power_pw2\").value=20;\rdocument.getElementById(\"pulse_pw1\").value=10;\rdocument.getElementById(\"pulse_pl1\").value=63;\rdocument.getElementById(\"pulse_pl2\").value=57;\r}\r}\r\rfunction show_power() {\rif(document.getElementById('bruker_radio').checked) {\rvar multiplier = -1; // Bruker\rvar float = 2 // Decimals for output dB\r} else if(document.getElementById('varian_radio').checked) {\rvar multiplier = 1; // Varian\rvar float = 0 // Decimals for output dB\r} else {\rdocument.getElementById(\"power_pl2\").value = \"PLEASE CHOOSE POWER FORMAT\"; }\rvar enter_pw1 = document.getElementById(\"power_pw1\").value; // pw1 (us)\rvar enter_pl1 = document.getElementById(\"power_pl1\").value; // pl1 (dB)\rvar enter_pw2 = document.getElementById(\"power_pw2\").value; // pw2 (us)\rvar dB = power_level(enter_pw1, enter_pl1, enter_pw2, multiplier); // pl2 (dB)\rvar output_dB = dB.toFixed(float); document.getElementById(\"power_pl2\").value = output_dB; // calculated value\rreturn false\r}\rfunction show_pulse() {\rif(document.getElementById('bruker_radio').checked) {\rvar multiplier = -1; // Bruker\rvar float = 2 // Decimals for output pulse\r} else if(document.getElementById('varian_radio').checked) {\rvar multiplier = 1; // Varian\rvar float = 2 // Decimals for output pulse\r} else {\rdocument.getElementById(\"new_pw2\").value = \"PLEASE CHOOSE POWER FORMAT\"; } var pulse_pw1 = document.getElementById(\"pulse_pw1\").value; // pw1 (us)\rvar pulse_pl1 = document.getElementById(\"pulse_pl1\").value; // pl1 (dB)\rvar pulse_pl2 = document.getElementById(\"pulse_pl2\").value; // pl2 (dB)\rvar calc_pw2 = pulse_width(pulse_pw1, pulse_pl1, pulse_pl2, multiplier); // pw2 (us)\rvar output_pw2 = calc_pw2.toFixed(float); document.getElementById(\"new_pw2\").value = output_pw2; // calculated value\rreturn false\r}\r\r\r\rBruker\nVarian\n\r\r\rinput[type='text'] { font-size: 24px; }\r \rCalculate power level\rPulse width (us) \nPower level (dB)\nNew pulse width (us)\nNew power level (dB) \n\rCalculate pulse width\rPulse width (us) \nPower level (dB)\nNew power level (dB)\nNew pulse width (us) \n \r \r","date":1612460703,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612460703,"objectID":"a479be64599956c38f3d295ef058089e","permalink":"/tools/nmr/pulse_power/","publishdate":"2021-02-04T13:45:03-04:00","relpermalink":"/tools/nmr/pulse_power/","section":"tools","summary":"Calculate the pulse width at a new power level or the power level given the desired pulse width","tags":["NMR","calculator","JavaScript"],"title":"Pulse power \u0026 pulse width","type":"tools"},{"authors":["**T. Reid Alderson**","Lewis E. Kay"],"categories":null,"content":"","date":1612396800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612396800,"objectID":"1680c6904a7398961e304bdc99c76eb6","permalink":"/publication/21_nmr_review_cell/","publishdate":"2021-02-17T02:29:27.564271Z","relpermalink":"/publication/21_nmr_review_cell/","section":"publication","summary":"Biomolecules are in constant motion. To understand how they function, and why malfunctions can cause disease, it is necessary to describe their three-dimensional structures in terms of dynamic conformational ensembles. Here, we demonstrate how nuclear magnetic resonance (NMR) spectroscopy provides an essential, dynamic view of structural biology that captures biomolecular motions at atomic resolution. We focus on examples that emphasize the diversity of biomolecules and biochemical applications that are amenable to NMR, such as elucidating functional dynamics in large molecular machines, characterizing transient conformations implicated in the onset of disease, and obtaining atomic-level descriptions of intrinsically disordered regions that make weak interactions involved in liquid-liquid phase separation. Finally, we discuss the pivotal role that NMR has played in driving forward our understanding of the biomolecular dynamics-function paradigm.","tags":["NMR","protein dynamics","lowly populated states","University of Toronto"],"title":"NMR spectroscopy captures the essential role of dynamics in regulating biomolecular function","type":"publication"},{"authors":["**T. Reid Alderson**","Elias Adriaenssens\u0026#8750;","Bob Asselbergh","Iva Pritišanac","Jonas Van Lent","Heidi Y. Gastall","Marielle A. Walti","John M. Louis","Vincent Timmerman","Andrew J. Baldwin","Justin L. P. Benesch"],"categories":null,"content":"","date":1612137600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1612137600,"objectID":"6c947ff673583d37351e35eac32e1d04","permalink":"/publication/20_hsp27_biorxiv/","publishdate":"2021-02-17T02:29:27.564271Z","relpermalink":"/publication/20_hsp27_biorxiv/","section":"publication","summary":"HSP27 is a human molecular chaperone that forms large, dynamic oligomers and functions in many aspects of cellular homeostasis. Mutations in HSP27 cause Charcot-Marie-Tooth (CMT) disease, the most common inherited disorder of the peripheral nervous system. A particularly severe form of CMT disease is triggered by the P182L mutation in the highly conserved IxI/V motif of the disordered C-terminal region, which interacts weakly with the structured core domain of HSP27. Here, we observed that the P182L mutation disrupts the chaperone activity and significantly increases the size of HSP27 oligomers formed in vivo, including in motor neurons differentiated from CMT patient-derived stem cells. Using NMR spectroscopy, we determined that the P182L mutation decreases the affinity of the HSP27 IxI/V motif for its own core domain, leaving this binding site more accessible for other IxI/V-containing proteins. We identified multiple IxI/V-bearing proteins that bind with higher affinity to the P182L variant due to the increased availability of the IxI/V binding site. Our results provide a mechanistic basis for the impact of the P182L mutation on HSP27 and suggest that the IxI/V motif plays an important, regulatory role in modulating protein-protein interactions.","tags":["Charcot-Marie-Tooth disease","CPMG relaxation dispersion","HSP27\"","molecular dynamics simulations","University of Oxford"],"title":"A weakened interface in the P182L variant of HSP27 associated with severe Charcot-Marie-Tooth neuropathy causes aberrant binding to interacting proteins","type":"publication"},{"authors":[],"categories":["bioinformatics","code","python"],"content":"In part 1, we looked at how to download a proteome from UniProt and perform some initial calculations with Python. We wrote a few functions to read the proteome file, store amino-acid sequences, and analyze protein length distributions with histograms. Here, we will focus on calculating biophysical properties from the protein sequences. We will begin to explore the relationship between protein length and various parameters, such as net charge, hydropathy, and disordered regions. We can make these comparisons between different organisms in order to explore the evolutionary landscape of these properties.\rI've written a short Python tutorial that outlines the following steps, with example screenshots and code showing how to perform the following calculations:\n\rper-residue and net charge\rper-residue and net hydropathy\rper-residue and net disordered content\r\rFirst, we will calculate the net charge of a protein at a given pH. As an example, let\u0026rsquo;s take the protein called p53, which is encoded by the TP53 gene. The FASTA file for p53 can be found via this link to UniProt. You can download this file using the terminal with the following command:\ncurl -o https://www.uniprot.org/uniprot/P04637.fasta p53.fasta\r The command-line program wget will also enable quick download (note the capital \u0026ldquo;O\u0026rdquo; here vs. the lowercase \u0026ldquo;o\u0026rdquo; in curl)\nwget -O https://www.uniprot.org/uniprot/P04637.fasta p53.fasta\r Now that we have our FASTA file, we can create a function to calculate the net charge. Before we begin, however, it\u0026rsquo;s important to revisit the Henderson-Hasselbalch equation and the chemistry of amino acids.\nAll naturally occurring amino acids in biology adopt the L configuration, except for glycine which is achiral. The basic structure of an amino acid is shown below:\nFigure 1: \u0026nbsp The structure of an amino acid. Left: uncharged form. Right: zwitterionic form. Add to favorites \n\rFirst name:\nLast name:\n\rFirst name:\nLast name:\n\r\u0026lt;\u0026lt;engine='python', engine.path='python3'\u0026gt;\u0026gt;=\rprint('hello world')\r@\r \u0026lt;form action=\u0026quot;https://formspree.io/f/xnqooazd\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;email\u0026quot; name=\u0026quot;_replyto\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Send\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r \u0026lt;div class=\u0026quot;uCalc_325402\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script\u0026gt; var widgetOptions325402 = { bg_color: \u0026quot;transparent\u0026quot; }; (function() { var a = document.createElement(\u0026quot;script\u0026quot;), h = \u0026quot;head\u0026quot;; a.async = true; a.src = (document.location.protocol == \u0026quot;https:\u0026quot; ? \u0026quot;https:\u0026quot; : \u0026quot;http:\u0026quot;) + \u0026quot;//ucalc.pro/api/widget.js?id=325402\u0026amp;t=\u0026quot;+Math.floor(new Date()/18e5); document.getElementsByTagName(h)[0].appendChild(a) })();\u0026lt;/script\u0026gt;\r asdf ASDFasdfASDF\nreid\ntest\n\r//function for displaying values\rfunction dis(val)\r{\rdocument.getElementById(\"edu\").value+=val\r}\r//function for evaluation\rfunction solve()\r{\rlet x = document.getElementById(\"edu\").value\rlet y = eval(x)\rdocument.getElementById(\"edu\").value = y\r}\r//function for clearing the display\rfunction clr()\r{\rdocument.getElementById(\"edu\").value = \"\"\r}\r\r\rEdureka JavaScript Calculator\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\radsflk;ajsdfkasdf;kasdf;alksdjf;askjf\nimport tkinter as tk\rwindow = tk.Tk()\rgreeting = tk.Label(text=\u0026quot;Hello, Tkinter\u0026quot;)\rgreeting.pack()\rwindow.mainloop()\r \r\r\rfunction myFunction() {\rdocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\r}\r\r\r\rJavaScript in Head\rA Paragraph.\nTry it\n\r ","date":1588214253,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588214253,"objectID":"3302a03f499de63b185974c773c9df78","permalink":"/landing/2/","publishdate":"2020-04-29T22:37:33-04:00","relpermalink":"/landing/2/","section":"landing","summary":"Calculating biophysical properties over the proteome. Here, we focus on: charge, hydropathy, and disorder. We visualize these properties with 1D and 2D histograms.","tags":["bioinformatics","python","proteome"],"title":"Bioinformatics with Python, part 2","type":"landing"},{"authors":[],"categories":["bioinformatics","code","python"],"content":"In part 1, we looked at how to download a proteome from UniProt and perform some initial calculations with Python. We wrote a few functions to read the proteome file, store amino-acid sequences, and analyze protein length distributions with histograms. Here, we will focus on calculating biophysical properties from the protein sequences. We will begin to explore the relationship between protein length and various parameters, such as net charge, hydropathy, and disordered regions. We can make these comparisons between different organisms in order to explore the evolutionary landscape of these properties.\rI've written a short Python tutorial that outlines the following steps, with example screenshots and code showing how to perform the following calculations:\n\rper-residue and net charge\rper-residue and net hydropathy\rper-residue and net disordered content\r\rFirst, we will calculate the net charge of a protein at a given pH. As an example, let\u0026rsquo;s take the protein called p53, which is encoded by the TP53 gene. The FASTA file for p53 can be found via this link to UniProt. You can download this file using the terminal with the following command:\ncurl -o https://www.uniprot.org/uniprot/P04637.fasta p53.fasta\r The command-line program wget will also enable quick download (note the capital \u0026ldquo;O\u0026rdquo; here vs. the lowercase \u0026ldquo;o\u0026rdquo; in curl)\nwget -O https://www.uniprot.org/uniprot/P04637.fasta p53.fasta\r Now that we have our FASTA file, we can create a function to calculate the net charge. Before we begin, however, it\u0026rsquo;s important to revisit the Henderson-Hasselbalch equation and the chemistry of amino acids.\nAll naturally occurring amino acids in biology adopt the L configuration, except for glycine which is achiral. The basic structure of an amino acid is shown below:\nFigure 1: \u0026nbsp The structure of an amino acid. Left: uncharged form. Right: zwitterionic form. Add to favorites \n\rFirst name:\nLast name:\n\rFirst name:\nLast name:\n\r\u0026lt;\u0026lt;engine='python', engine.path='python3'\u0026gt;\u0026gt;=\rprint('hello world')\r@\r \u0026lt;form action=\u0026quot;https://formspree.io/f/xnqooazd\u0026quot; method=\u0026quot;POST\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;name\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;email\u0026quot; name=\u0026quot;_replyto\u0026quot;\u0026gt;\r\u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;Send\u0026quot;\u0026gt;\r\u0026lt;/form\u0026gt;\r \u0026lt;div class=\u0026quot;uCalc_325402\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;script\u0026gt; var widgetOptions325402 = { bg_color: \u0026quot;transparent\u0026quot; }; (function() { var a = document.createElement(\u0026quot;script\u0026quot;), h = \u0026quot;head\u0026quot;; a.async = true; a.src = (document.location.protocol == \u0026quot;https:\u0026quot; ? \u0026quot;https:\u0026quot; : \u0026quot;http:\u0026quot;) + \u0026quot;//ucalc.pro/api/widget.js?id=325402\u0026amp;t=\u0026quot;+Math.floor(new Date()/18e5); document.getElementsByTagName(h)[0].appendChild(a) })();\u0026lt;/script\u0026gt;\r asdf ASDFasdfASDF\nreid\ntest\n\r//function for displaying values\rfunction dis(val)\r{\rdocument.getElementById(\"edu\").value+=val\r}\r//function for evaluation\rfunction solve()\r{\rlet x = document.getElementById(\"edu\").value\rlet y = eval(x)\rdocument.getElementById(\"edu\").value = y\r}\r//function for clearing the display\rfunction clr()\r{\rdocument.getElementById(\"edu\").value = \"\"\r}\r\r\rEdureka JavaScript Calculator\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\radsflk;ajsdfkasdf;kasdf;alksdjf;askjf\nimport tkinter as tk\rwindow = tk.Tk()\rgreeting = tk.Label(text=\u0026quot;Hello, Tkinter\u0026quot;)\rgreeting.pack()\rwindow.mainloop()\r \r\r\rfunction myFunction() {\rdocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\r}\r\r\r\rJavaScript in Head\rA Paragraph.\nTry it\n\r ","date":1588214253,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588214253,"objectID":"84fd9322ca0817deac0ef95d0e3caa32","permalink":"/post/2/","publishdate":"2020-04-29T22:37:33-04:00","relpermalink":"/post/2/","section":"post","summary":"Calculating biophysical properties over the proteome. Here, we focus on: charge, hydropathy, and disorder. We visualize these properties with 1D and 2D histograms.","tags":["bioinformatics","python","proteome"],"title":"Bioinformatics with Python, part 2","type":"post"},{"authors":[],"categories":["code","python","bioinformatics"],"content":"While collaborating on a research project with colleagues from the University of Antwerp, we became interested in understanding how frequently specific amino-acid motifs appear in the human proteome. This question arose because we were studying a neuropathy-causing mutation in the protein HSP27, which is a small heat-shock protein that functions as a molecular chaperone. The particular mutation in HSP27 changes the native proline residue at position 182 to leucine (P182L), which disrupts a conserved motif known as the \"[I/V]x[I/V]\" motif wherein the first and third residues are either isoleucine (I) or valine (V) while the central residue can be anything (x). In mammalian small heat-shock proteins, the central residue is typically proline. The [I/V]x[I/V] motif is an example of a short linear motif (SLiM), which are motifs of typically 3-8 residues that can play important biological roles, such as mediating protein-protein interactions or promoting degradation. Notably, SLiMs generally appear in intrinsically disordered regions (IDRs) of proteins, thus ensuring accessibility and promoting promiscuous interactions with many other proteins. If you are interested in searching for SLiMs in your protein of interest, here is a useful website called SlimSearch, which is based on this paper from the Davey Lab.\rAnyway, during our hunt for [I/V]x[I/V] SLiMs in the human proteome, I wrote some Python scripts that I used to perform proteome-wide calculations on UniProt proteomes or FASTA files. I've written a short Python tutorial that outlines the following steps, with example screenshots and code showing how to:\n\rDownload and format UniProt proteome files\rCompute the mean and median protein length\rPlot histograms of protein length distributions\r\rI wrote this in Python3.7.4 and the code requires a few packages (Numpy, Pandas, and BioPython) that you might have to install ahead of time.\nFirst, open up a new text file and import these packages\nimport os, sys\rimport numpy as np\rimport matplotlib.pyplot as plt\rimport pandas as pd\rfrom Bio import SeqIO\rimport itertools\r Now, let\u0026rsquo;s create a class called Proteome where we will perform our large-scale counting exercises. By default, we must begin the class with the init function. In case you are unfamiliar with classes, take a look at this helpful explanation.\nclass Proteome(object):\r\u0026quot;\u0026quot;\u0026quot; Some useful calculations on proteomes \u0026quot;\u0026quot;\u0026quot;\rdef __init__(self):\rself.type = None\r Save this file as \u0026ldquo;run.py\u0026rdquo; in the directory of your choice.\nIn order to start counting motifs within a proteome, we first need a proteome! The UniProt website maintains a large repository of proteomes, so download the Reviewed human proteome from this link. Make sure to download the files in FASTA format! UniProt maintains a very large database of alternatively spliced isoforms of each gene; for the purposes of this example, we are only interested in the \u0026ldquo;canonical\u0026rdquo; isoform of each gene, i.e. one gene, one amino acid sequence. So, make sure to click the \u0026ldquo;Reviewed\u0026rdquo; version of the proteome.\n Figure 1: \u0026nbspNavigate to the human proteome on UniProt and click Reviewed.\r \nAfter clicking on Reviewed, the website will take you to the page shown below. However, before we download the proteome, we first must specify a few things about the file format. Click on the Columns button to specify the data that we\u0026rsquo;ll include in the file.\n Figure 2: \u0026nbsp Specify which parameters to include in the download file by clicking on Columns. \r \nOn the Column page, you must click the box next to Sequence in order to indicate that you want each protein\u0026rsquo;s sequence included in the downloaded file.\n Figure 3: \u0026nbspClick the box next to Sequence\r Then scroll up and click Save in the upper-right corner.\n Figure 4: \u0026nbspClick Save\r This will take you back to the UniProtKB Results screen from above. Click on Download and then, under Format, choose Tab-separated from the drop-down menu. Also, make sure to click the button Uncompressed. Now, you can click Go to download the file containing 20,350 FASTA files. I saved this file as \u0026ldquo;uniprot_human.tab\u0026rdquo; and it\u0026rsquo;s roughly 14.5 MB in size.\n Figure 5: \u0026nbspDownload the tab-separated file\r \nBefore we move ahead, let\u0026rsquo;s open up the file and see what it contains. It should come as a [long-name-here].tab file, so rename it something convenient and store it in the same directory as your new .py file. Then, open up the .tab file in your favorite text editor. Below is a screenshot from Notepad++, and you can see that I\u0026rsquo;ve highlighted the first row that contains the column headings: Entry, Entry name, Status, Protein names, Gene names, Organism, Length, Sequence. At the bottom of Notepad++, it shows us that we have 20,352 lines in this file. The first line contains the column headers and the very last line is empty, so there are 20,350 proteins here. This is a good sanity check: the number of proteins in the file matches the value listed on the UniProt website.\n Figure 6: \u0026nbsp Open up the file and peruse it\r Now that we know what our proteome file looks like, we can write a Python function to open it up and store it in a Pandas dataframe.\ndef load_uniprot(self, uniprot):\r\u0026quot;\u0026quot;\u0026quot; Reads a UniProt file; returns a pandas dataframe\rParameters\r----------\tuniprot : file downloaded from UniProt containing a proteome of interest\rReturns\r-------\rproteome_dataframe, a Pandas dataframe that contains the FASTA IDs, sequences, and length of sequences \u0026quot;\u0026quot;\u0026quot; self.uniprot_proteome = pd.read_csv(uniprot, sep='\\t', names=['Entry', 'Entry name', 'Status', 'Protein names', 'Gene names', 'Organism', 'Length', 'Sequence'])\rself.uniprot_proteome['Length'][1:] = self.uniprot_proteome['Length'][1:].astype(int) # convert the length values to integers\rreturn self.uniprot_proteome\r We\u0026rsquo;ve now loaded the proteome into a Pandas dataframe that contains 3 columns:\n  ID = the UniProt ID\n  Sequence = the protein\u0026rsquo;s sequence\n  Length = the protein\u0026rsquo;s length.\n  To read the fasta file, we\u0026rsquo;ve made use of the SeqIO.index function in BioPython, which converts a FASTA file into a dictionary with keys and values respectively corresponding to IDs and sequences. With SeqIO.index(), one has a fast way to load very large FASTA files into Python without having to do a loop or loading of all lines into memory at once (e.g. with the Seq.list() or Seq.to_dict() functions).\nWith our proteome in an accessible data structure, we can begin to calculate some basic properties. For instance, we might want to know the total proteome length, in case we\u0026rsquo;d like to compute percentages.\ndef proteome_length(self, query_proteome):\r\u0026quot;\u0026quot;\u0026quot; Reads a Pandas dataframe containing a proteome of interest; returns the total number of residues\rParameters\r----------\tquery_proteome : Pandas dataframe, contains the proteome of interest\rReturns\r-------\rtotal_length : int, total number of residues in proteome_dataframe \u0026quot;\u0026quot;\u0026quot; total_length = query_proteome['Length'][1:].sum(axis=0, skipna=True)\rreturn total_length\r \nThis function takes a proteome in a Pandas dataframe as input and returns the total number of residues in that proteome. To quickly count up the number of residues in the proteome, we can sum the Length column that we\u0026rsquo;ve already appended to our dataframe in the load_fasta function above. The argument \u0026ldquo;axis=0\u0026rdquo; is required to tell Pandas to sum down the column and not across the row.\nSo, now that we have the total number of residues in the proteome, let\u0026rsquo;s write a function to search the proteome for a specific motif. We want this function to output two values:\n  the total number of times that we counted the queried motif. Let\u0026rsquo;s call this value sum.\n  the observed number of motifs divided by the total number of peptides of size n in the proteome, or the fraction.\n  Because we are counting up motifs in a \u0026ldquo;sliding\u0026rdquo; manner, i.e. by starting at residue 1 and working our way toward the C-terminus, then we should also calculate how many peptides of size $n$ exist in a similar manner. For example, if our queried motif is \u0026ldquo;QVERY\u0026rdquo; then our denominator, $x$, becomes:\n$x = (N-n)+1$ where $N$ is the length of the proteome and $n$ is the length of the queried motif. (I encourage you to calculate this on your own using, e.g. $N$ = 10 and $n$ = 2. You\u0026rsquo;ll see that there exist 9 di-peptides when sliding from residue 1 to residue 10, i.e. 1-2, 2-3, 3-4, \u0026hellip; , 9-10).\ndef find_motifs(self, data_frame, query):\r\u0026quot;\u0026quot;\u0026quot; Searches a Pandas dataframe containing a proteome for a specific amino acid/motif; returns the number of instances and fraction\rParameters\r----------\tdata_frame : Pandas dataframe, contains the proteome of interest\rquery : str, the amino acid or motif to be searched\rReturns\r-------\rsum : int, total number of hits for the queried residue/motif\rfraction: float, sum divided by the total number of residues or motifs of the same size \u0026quot;\u0026quot;\u0026quot; # Extract sequences from the pandas dataframe\rseqs = data_frame['Sequence']\r# Calculate the total number of residues in the queried proteome\rtotal_residues = self.proteome_length(data_frame)\r# Initialize an array\rhits_array = []\r# Loop over each sequence and count the number of times the queried motif shows up\rfor protein in seqs:\rhits_array.append(protein.count(query))\r# total number of hits for the queried residue/motif, check if any hits are found\rsum = np.sum(np.asarray(hits_array)) if sum \u0026lt; 1:\rfraction = 0\relse:\rfraction = sum/(total_residues - len(query)+1) # total number of hits divided by the total number of residues or motifs of the same size\rreturn sum, fraction\r \nLet\u0026rsquo;s test out the code. We can quickly instantiate the class, load the FASTA file, and calculate the total length of the proteome.\n# Instantiate the class human = Proteome()\r# Load the FASTA file containing the human proteome uniprot = human.load_uniprot('uniprot_human.tab') # replace with the name of your .tab file\r# What is the length of the proteome?\rprint('Proteome length = %.0f AA' % human.proteome_length(uniprot))\r  Proteome length = 11354232 AA\n For the human proteome, we see that there are $N$ = 11,354,232 residues. So, for our example above with the motif \u0026ldquo;QVERY\u0026rdquo;, there are $x$ = (11,354,232 $-$ 5)+1 = 11,354,228 penta-peptides in the proteome.\nWith our new function find_motifs, we can also count how many particular motifs exist in the proteome.\n# Find how many Q, QV, QVE, QVER, QVERI, QVERIE, QVERIES\rmotif = 'QVERIES'\rfor i in range(0, len(motif)+1):\rprint('%s = %.0f' % (motif[0:i], human.find_motifs(uniprot, motif[0:i])[0]))\r   Q = 541533  QV = 31622  QVE = 2108\n QVER = 116\n QVERI = 6\n QVERIE = 2\n QVERIES = 0\n By iterating over the queried motif \u0026ldquo;QVERIES\u0026rdquo;, we see that the number of found motifs dramatically decreases with increasing length of the peptide. In fact, in the entire proteome comprising 11,354,226 hepta-peptides, there is not a single QVERIES motif to be found. We\u0026rsquo;ll return to this point a little later.\nWe now know that there are about 11.4 million amino acids in the proteome. Indeed, it would take some time to count motifs by hand\u0026hellip;! We can do some basic calculations with these numbers, and we find that the average length of a human protein is 558 residues, or ca 61 kDa (using an estimate of ca 110 Da per amino acid).\nWe can also compute this with numpy, where we obtain the same average length of 558 residues. The median length, however, is only 415 residues, and this reflects a skewed distribution.\n# What are the mean \u0026amp; median protein lengths in the proteome?\rmean = np.mean(uniprot['Length'][1:])\rmedian = np.median(uniprot['Length'][1:])\rprint('Mean protein length = %.0f AA' % mean)\rprint('Median protein length = %.0f AA' % median)\r   Mean protein length = 558 AA\n Median protein length = 415 AA\n We can plot a histogram of protein lengths to visualize the distribution over the proteome. I limited the x axis because the vast majority of proteins are fewer than 3000 residues. Indeed, we can see that our distribution of protein sizes (below) are skewed to the right with a tail.\n# Plot a histogram of sequence length plt.hist(uniprot['Length'][1:], bins=1000, color='k', edgecolor='w', linewidth=0.1)\rplt.title('Protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.tight_layout()\rplt.show()\r Histogram of protein lengths in the human proteome\r We can smooth out our distribution by applying a filter known as the Savitzky-Golay filter.\nfrom scipy.signal import savgol_filter\rdef filter(data_to_filter, window=19, poly=3):\r\u0026quot;\u0026quot;\u0026quot; Applys the Savitzky-Golay filter to a 1D array\rParameters\r----------\tdata_to_filter : dataframe or array, contains the data to be smoothed\rwindow : int, the length of the filter window\rpoly : int, the order of the polynomial (must be \u0026lt; window)\rReturns\r-------\rfiltered : array, the smoothed data \u0026quot;\u0026quot;\u0026quot; data = np.asarray(data_to_filter).astype(np.float64)\rfiltered = savgol_filter(data, window, poly)\rreturn filtered\r# Bin the data\rdata, bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=False)\r# Smooth the binned data\rfiltered_data = filter(data, window=19, poly=3)\r# Plot the histogram \u0026amp; the smoothed data\rplt.hist(uniprot['Length'][1:], bins=1000, color='k', edgecolor='w', linewidth=0.1, label='Original data')\rplt.plot(bins[:-1], filtered_data, 'r', label='Smoothed data')\rplt.title('Smoothed protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.ylim([0,None])\rplt.legend(loc='upper right')\rplt.tight_layout()\rplt.show()\r Smoothing the histogram with a Savitzky-Golay filter\rWe can also recover the histogram-style plot of our smoothed data by making use of the weights variable in the plt.hist function:\n# Plot our histogram as above\rplt.hist(uniprot['Length'][1:], bins=1000, density=False, color='k', alpha=0.5, edgecolor='w', linewidth=0.1, label='Original data')\r# Plot the smoothed data as a histogram by setting weights = filtered_data\rplt.hist(bins[:-1], bins=1000, weights = filtered_data, density=False, color='r', alpha=0.5, edgecolor='w', linewidth=0.1, label='Smoothed data')\r# These are the exact same plotting parameters as above\rplt.title('Smoothed protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.ylim([0,None])\rplt.legend(loc='upper right')\rplt.tight_layout()\rplt.show()\r Smoothing the histogram with a Savitzky-Golay filter and recovering the binned values\r Now that we\u0026rsquo;ve plotted our smoothed distribution, we can compare this to other organisms. Do humans, on average, have shorter or longer proteins that some model organisms like E. coli or S. cerevisiae? To test this, we can simply download the respective proteomes from UniProt using the steps outlined above. You can click these links to reach the E. coli proteome or the S. cerevisiae proteome that I used for the calculations below.\nFirst, we see from the UniProt download pages that these two proteomes are much smaller than the human proteome: E. coli and S. cerevisiae respectively contain ~4,400 and ~6,000 proteins, which pale in number compared to the ~20,400 found in humans. Thus, to plot these distributions on the same y-axis, we must set the density option to True in our histograms, which ensures that the area under the histogram sums to 1. This enables us to compare histograms on the same y axis.\nWe can set up our script to compare these distributions:\n# Instantiate the class human = Proteome()\r# Load the FASTA file containing the human proteome uniprot = human.load_uniprot('uniprot_human.tab') # replace with the name of your .tab file\recoli = human.load_uniprot('uniprot_ecoli_k12.tab')\ryeast = human.load_uniprot('uniprot_yeast.tab')\r# How many amino acids are in each proteome?\rprint('\\n')\rprint('Human has %.0f AA' % human.proteome_length(uniprot)) print('Yeast has %.0f AA' % human.proteome_length(yeast))\rprint('E coli has %.0f AA' % human.proteome_length(ecoli))\rprint('\\n')\r# What are the mean \u0026amp; median lengths of a protein in each proteome? print('Mean (median) human protein = %.0f AA (%.0f AA)' % (human.proteome_length(uniprot)/(len(uniprot['Length'][1:])), np.median(uniprot['Length'][1:])))\rprint('Mean (median) yeast protein = %.0f AA (%.0f AA)' % (human.proteome_length(yeast)/(len(yeast['Length'][1:])), np.median(yeast['Length'][1:])))\rprint('Mean (median) E coli protein = %.0f AA (%.0f AA)' % (human.proteome_length(ecoli)/(len(ecoli['Length'][1:])), np.median(ecoli['Length'][1:])))\r   Human has 11354232 AA\n Yeast has 2936363 AA\n E coli has 1354187 AA\n Mean (median) human protein = 558 AA (415 AA)\n Mean (median) yeast protein = 485 AA (396 AA)\n Mean (median) E coli protein = 309 AA (271 AA)\n From this analysis, we can see a couple of interesting features. First, the average human protein (558 AA) is longer than the average yeast protein (485 AA) and nearly twice as long the E. coli average (309 AA). Interestingly, however, the median protein sizes from human and yeast are roughly equivalent, which suggests that the human proteome has a long(er) tail that includes some very large proteins.\n Comparing the mean and median protein lengths across three different organisms\r # Plot the mean \u0026amp; median protein lengths in a bar graph fig = plt.figure(figsize=(6,4.5))\rax = fig.add_subplot(111)\rax.bar(1, human.proteome_length(uniprot)/(len(uniprot['Length'][1:])), color='k', label='Mean')\rax.bar(1.5, np.median(uniprot['Length'][1:]), color='w', edgecolor='grey', alpha=0.85, label='Median')\rax.bar(2.5, human.proteome_length(yeast)/(len(yeast['Length'][1:])), color='purple')\rax.bar(3, np.median(yeast['Length'][1:]), color='w', edgecolor='pink', alpha=0.85)\rax.bar(4, human.proteome_length(ecoli)/(len(ecoli['Length'][1:])), color='darkorange')\rax.bar(4.5, np.median(ecoli['Length'][1:]), color='w', edgecolor='yellow', alpha=0.85)\r# Axis labels, legend, and title\rax.set_ylabel('Number of amino acids')\rax.set_xlabel('Organism')\rax.legend(loc='upper right')\rax.set_title('Comparing mean \u0026amp; median protein lengths')\r# Tick positions \u0026amp; labels\rax.set_xticks([1.25, 2.75, 4.25])\rax.set_xticklabels(['Human', r'$S$. $cerevisiae$', r'$E$. $coli$'])\rplt.tight_layout()\rplt.show()\r We can also plot these data in histogram format as follows:\n Comparing the distributions of protein lengths for three different organisms\r # Get the bins from the human distribution\rhuman_dat, human_bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=True)\r# Plot the histograms using the same bins\rplt.hist(uniprot['Length'][1:], bins=human_bins, color='k', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$H$. $sapiens$', density=True)\rplt.hist(yeast['Length'][1:], bins=human_bins, color='purple', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$S$. $cerevisiae$', density=True)\rplt.hist(ecoli['Length'][1:], bins=human_bins, color='darkorange', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$E$. $coli$', density=True)\r# Set up the axis limits, title, and legend\rplt.xlim(0,3000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing protein length distributions')\rplt.legend(loc='upper right')\r# Plot\rplt.tight_layout()\rplt.show()\r or with our smoothing function:\n Comparing the smoothed distributions of protein lengths for three different organisms\r # Histogram the data using the same bins\rhuman_dat, human_bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=True)\recoli_dat, ecoli_bins = np.histogram(np.asarray(ecoli['Length'][1:]), bins=human_bins, density=True)\ryeast_dat, yeast_bins = np.histogram(np.asarray(yeast['Length'][1:]), bins=human_bins, density=True)\r# Plot the smoothed data as lines plt.plot(human_bins[:-1], filter(human_dat), 'k-', label=r'$H$. $sapiens$')\rplt.plot(yeast_bins[:-1], filter(yeast_dat), '-', color='purple', label=r'$S$. $cerevisiae$')\rplt.plot(ecoli_bins[:-1], filter(ecoli_dat), '-', color='darkorange', label=r'$E$. $coli$')\r# Set up the axis limits, title, and legend\rplt.xlim(0,3000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing smoothed protein length distributions')\rplt.legend(loc='upper right')\r# Plot\rplt.tight_layout()\rplt.show()\r For me, it was surprising to see how much the yeast proteome resembles the human proteome! Maybe to an evolutionary biologist this would not be surprising; however, to a structural biologist like myself, I never would have guessed that the proteome of the tiny, single-celled S. cerevisiae could look so similar to humans. Alongside protein length, perhaps the hubristic tendencies of humans have also been evolutionarily conserved\u0026hellip;\n\nThe histograms above tell us three things:\n  there are many more small proteins in E. coli\n  proteins became significantly longer between the appearance of E. coli and that of S. cerevisiae\n  the distribution of protein lengths has not changed much between S. cerevisiae and humans.\n  Above we compared the protein length distribution of a prokaryote, E. coli, to two eukaryotes, the single-celled organism S. cerevisiae and far more complex H. sapiens. What do protein length distributions from other prokaryotes or archaea look like? How do proteins in human mitochondria compare?\nI downloaded the proteomes (using the above outline) from the following organisms:\n  Methanocaldococcus jannaschii (an archaeon)  Thermus thermophilus (a bacterium) Bacillus subtilis (a bacterium) and the mitochondrial proteome from Homo sapiens  The mitochondrial proteome was made available by The Broad Institute in their MitoCarta2.0 release, which can be found in the following publication.\n# Load the new proteomes\rmj = human.load_uniprot('m_jannaschii.tab')\rbs = human.load_uniprot('b_subtilis.tab')\rtt = human.load_uniprot('t_thermophilus.tab')\r# in order to load the mitochondrial proteome, we need a new function\r# that can read generic FASTA files and return a pandas dataframe\rdef load_fasta(self, fasta):\r\u0026quot;\u0026quot;\u0026quot; Reads a fasta file with identifiers (IDs) and sequences; returns a pandas dataframe\rParameters\r----------\tfasta : file in FASTA format with identifiers (e.g. \u0026gt;) and sequences Returns\r-------\rfasta_proteome, a Pandas dataframe that contains the FASTA IDs, sequences, and length of sequences \u0026quot;\u0026quot;\u0026quot;\r# Load the fasta file\rself.seq_list = SeqIO.index(fasta, \u0026quot;fasta\u0026quot;) # makes dictionary, but contains Seq objects\r# Create arrays to store the relevant information\rids = [] ; seqs = []\rfor key, value in self.seq_list.items():\rids.append(key)\rseqs.append(str(value.seq)) # string the Seq object go get only the sequence\r# Create a dictionary for subsequent conversion into a dataframe\rself.dictionary = {'ID':ids, 'Sequence':seqs} # Load the dictionary into a dataframe\rself.fasta_proteome = pd.DataFrame(self.dictionary) self.fasta_proteome['Length'] = self.fasta_proteome['Sequence'].str.len() # create column in the dataframe with sequence lengths\rself.fasta_proteome['Length'][1:] = self.fasta_proteome['Length'][1:].astype(int) # convert the length values to integers\rreturn self.fasta_proteome\r# now load the mitochondrial proteome using \u0026quot;load_fasta\u0026quot;\rmito = human.load_fasta('Human.MitoCarta2.0.fasta')\r Now that the data have been loaded into pandas dataframes, we can plot the smoothed protein length distributions. To speed things up, we can write a function:\ndef plot_list_hist(list_organisms, names):\r# get reference data\rref_dat, ref_bins = np.histogram(np.asarray(list_organisms[0]['Length'][1:]), bins=1000, density=True) # get reference bins for 1st item in list\r# make array data = np.zeros(shape=(len(list_organisms), len(ref_bins)-1))\rcolors = plt.cm.viridis(np.linspace(0.0, 1, len(list_organisms)))\r# loop and plot\rfig = plt.figure(figsize=(6,4.5))\rfor i, item in enumerate(list_organisms):\rdat, bins = np.histogram(np.asarray(item['Length'][1:]), bins=ref_bins, density=True)\rdata[i, :] = dat plt.plot(ref_bins[:-1], filter(dat), '-', label=names[i], color=colors[i])\rplt.xlim(0,2000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing smoothed protein length distributions')\rplt.legend(loc='upper right')\rplt.tight_layout()\r#plt.show()\rreturn fig\r# create a list of data and data names\rdata = [uniprot, mito, ecoli, bs, tt, mj]\rdata_names = [r'$H$. $sapiens$', r'$H$. $sapiens$, $mito$', r'$E$. $coli$', r'$B$. $subtilis$', r'$T$. $thermophilus$', r'$M$. $jannaschii$']\r# use the \u0026quot;plot_list\u0026quot; function plot_list_hist(data, data_names)\rplt.show()\r  Comparing the smoothed distributions of protein lengths across organisms\r \nFrom this comparison, we can see that the mitochondrial proteome lies somewhere between the E. coli and human proteomes. Of course, our human proteome dataset also contains all of the mitochondrial proteins; so, had we selectively removed the ~1000 mitochondrial proteins from the human proteome, we would see a slightly more pronounced difference. Nevertheless, for proteins with fewer than 500 amino acids, the mitochondrial proteome looks more similar in terms of its length distribution to E. coli. For proteins longer than 500 residues, however, the long tail of the mitochondrial proteome bears more resemblance to human. Overall, these apparent differences may reflect the more ancient evolutionary origin of mitochondria: more smaller proteins than expected for the human proteome, but more larger proteins than expected for prokaryotes or archaea.\nFinally, we can also plot the mean and median protein lengths, as we did earlier. To make this a little faster, however, we can create a small loop:\n# create the figure\rfig = plt.figure(figsize=(6,4.5))\rax = fig.add_subplot(111)\r# create a list of colors using the colormaps package\rabbrv_names = ['HS', 'HS\\nmito', 'EC', 'BS', 'TT', 'MJ']\rcolors = plt.cm.viridis(np.linspace(0.0, 1, len(abbrv_names)))\r# initiate a counter and empty array (for xtick positions)\rcounter = 1\rxtick_list = []\r# now loop over the organisns\rfor i in range(len(abbrv_names)):\rif i == 0:\rax.bar(counter, human.proteome_length(orgs[i])/(len(orgs[i]['Length'][1:])), color=colors[i], label='Mean')\rax.bar(counter+0.5, np.median(orgs[i]['Length'][1:]), color='w', edgecolor=colors[i], alpha=0.85, label='Median')\relse:\rax.bar(counter, human.proteome_length(orgs[i])/(len(orgs[i]['Length'][1:])), color=colors[i])\rax.bar(counter+0.5, np.median(orgs[i]['Length'][1:]), color='w', edgecolor=colors[i], alpha=0.85) xtick_list.append(counter+0.25)\rcounter += 1\r# Axis labels \u0026amp; the legend\rax.set_ylabel('Number of amino acids')\rax.set_xlabel('Organism')\rax.legend(loc='upper right')\r# Tick positions \u0026amp; labels\rax.set_xticks(xtick_list)\rax.set_xticklabels(abbrv_names)\rax.set_title('Comparing mean \u0026amp; median protein lengths')\r#plt.xticks(rotation=0, fontsize=8)\rplt.tight_layout()\rplt.show()\r Comparing the mean and median protein lengths across organisms. The abbrevations are as follows: Homo sapiens (HS), mitochondrial (mito), E. coli (EC), Bacillus subtilis (BS), Thermus thermophilus (TT), Methanocaldococcus jannaschii (MJ). \rWe can clearly see that the median protein length in the mitochondria is ~100 residues smaller than the typical human protein. The difference in the means is even more pronounced, which reflects the very long tail in the human proteome (as discussed above).\nNext time, I\u0026rsquo;ll discuss how we can use Python to calculate biophysical properties from protein sequences, and how we can perform such calculations on the proteome scale.\n","date":1587325683,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587325683,"objectID":"8e5764cb04f60ce776d2c4f6b500ba7e","permalink":"/landing/1/","publishdate":"2020-04-19T15:48:03-04:00","relpermalink":"/landing/1/","section":"landing","summary":"How to download proteomes from UniProt and analyze distributions of protein lengths. This allows for quick comparisons between different organisms.","tags":["bioinformatics","python","proteome"],"title":"Bioinformatics with Python, part 1","type":"landing"},{"authors":[],"categories":["code","python","bioinformatics"],"content":"While collaborating on a research project with colleagues from the University of Antwerp, we became interested in understanding how frequently specific amino-acid motifs appear in the human proteome. This question arose because we were studying a neuropathy-causing mutation in the protein HSP27, which is a small heat-shock protein that functions as a molecular chaperone. The particular mutation in HSP27 changes the native proline residue at position 182 to leucine (P182L), which disrupts a conserved motif known as the \"[I/V]x[I/V]\" motif wherein the first and third residues are either isoleucine (I) or valine (V) while the central residue can be anything (x). In mammalian small heat-shock proteins, the central residue is typically proline. The [I/V]x[I/V] motif is an example of a short linear motif (SLiM), which are motifs of typically 3-8 residues that can play important biological roles, such as mediating protein-protein interactions or promoting degradation. Notably, SLiMs generally appear in intrinsically disordered regions (IDRs) of proteins, thus ensuring accessibility and promoting promiscuous interactions with many other proteins. If you are interested in searching for SLiMs in your protein of interest, here is a useful website called SlimSearch, which is based on this paper from the Davey Lab.\rAnyway, during our hunt for [I/V]x[I/V] SLiMs in the human proteome, I wrote some Python scripts that I used to perform proteome-wide calculations on UniProt proteomes or FASTA files. I've written a short Python tutorial that outlines the following steps, with example screenshots and code showing how to:\n\rDownload and format UniProt proteome files\rCompute the mean and median protein length\rPlot histograms of protein length distributions\r\rI wrote this in Python3.7.4 and the code requires a few packages (Numpy, Pandas, and BioPython) that you might have to install ahead of time.\nFirst, open up a new text file and import these packages\nimport os, sys\rimport numpy as np\rimport matplotlib.pyplot as plt\rimport pandas as pd\rfrom Bio import SeqIO\rimport itertools\r Now, let\u0026rsquo;s create a class called Proteome where we will perform our large-scale counting exercises. By default, we must begin the class with the init function. In case you are unfamiliar with classes, take a look at this helpful explanation.\nclass Proteome(object):\r\u0026quot;\u0026quot;\u0026quot; Some useful calculations on proteomes \u0026quot;\u0026quot;\u0026quot;\rdef __init__(self):\rself.type = None\r Save this file as \u0026ldquo;run.py\u0026rdquo; in the directory of your choice.\nIn order to start counting motifs within a proteome, we first need a proteome! The UniProt website maintains a large repository of proteomes, so download the Reviewed human proteome from this link. Make sure to download the files in FASTA format! UniProt maintains a very large database of alternatively spliced isoforms of each gene; for the purposes of this example, we are only interested in the \u0026ldquo;canonical\u0026rdquo; isoform of each gene, i.e. one gene, one amino acid sequence. So, make sure to click the \u0026ldquo;Reviewed\u0026rdquo; version of the proteome.\n Figure 1: \u0026nbspNavigate to the human proteome on UniProt and click Reviewed.\r \nAfter clicking on Reviewed, the website will take you to the page shown below. However, before we download the proteome, we first must specify a few things about the file format. Click on the Columns button to specify the data that we\u0026rsquo;ll include in the file.\n Figure 2: \u0026nbsp Specify which parameters to include in the download file by clicking on Columns. \r \nOn the Column page, you must click the box next to Sequence in order to indicate that you want each protein\u0026rsquo;s sequence included in the downloaded file.\n Figure 3: \u0026nbspClick the box next to Sequence\r Then scroll up and click Save in the upper-right corner.\n Figure 4: \u0026nbspClick Save\r This will take you back to the UniProtKB Results screen from above. Click on Download and then, under Format, choose Tab-separated from the drop-down menu. Also, make sure to click the button Uncompressed. Now, you can click Go to download the file containing 20,350 FASTA files. I saved this file as \u0026ldquo;uniprot_human.tab\u0026rdquo; and it\u0026rsquo;s roughly 14.5 MB in size.\n Figure 5: \u0026nbspDownload the tab-separated file\r \nBefore we move ahead, let\u0026rsquo;s open up the file and see what it contains. It should come as a [long-name-here].tab file, so rename it something convenient and store it in the same directory as your new .py file. Then, open up the .tab file in your favorite text editor. Below is a screenshot from Notepad++, and you can see that I\u0026rsquo;ve highlighted the first row that contains the column headings: Entry, Entry name, Status, Protein names, Gene names, Organism, Length, Sequence. At the bottom of Notepad++, it shows us that we have 20,352 lines in this file. The first line contains the column headers and the very last line is empty, so there are 20,350 proteins here. This is a good sanity check: the number of proteins in the file matches the value listed on the UniProt website.\n Figure 6: \u0026nbsp Open up the file and peruse it\r Now that we know what our proteome file looks like, we can write a Python function to open it up and store it in a Pandas dataframe.\ndef load_uniprot(self, uniprot):\r\u0026quot;\u0026quot;\u0026quot; Reads a UniProt file; returns a pandas dataframe\rParameters\r----------\tuniprot : file downloaded from UniProt containing a proteome of interest\rReturns\r-------\rproteome_dataframe, a Pandas dataframe that contains the FASTA IDs, sequences, and length of sequences \u0026quot;\u0026quot;\u0026quot; self.uniprot_proteome = pd.read_csv(uniprot, sep='\\t', names=['Entry', 'Entry name', 'Status', 'Protein names', 'Gene names', 'Organism', 'Length', 'Sequence'])\rself.uniprot_proteome['Length'][1:] = self.uniprot_proteome['Length'][1:].astype(int) # convert the length values to integers\rreturn self.uniprot_proteome\r We\u0026rsquo;ve now loaded the proteome into a Pandas dataframe that contains 3 columns:\n  ID = the UniProt ID\n  Sequence = the protein\u0026rsquo;s sequence\n  Length = the protein\u0026rsquo;s length.\n  To read the fasta file, we\u0026rsquo;ve made use of the SeqIO.index function in BioPython, which converts a FASTA file into a dictionary with keys and values respectively corresponding to IDs and sequences. With SeqIO.index(), one has a fast way to load very large FASTA files into Python without having to do a loop or loading of all lines into memory at once (e.g. with the Seq.list() or Seq.to_dict() functions).\nWith our proteome in an accessible data structure, we can begin to calculate some basic properties. For instance, we might want to know the total proteome length, in case we\u0026rsquo;d like to compute percentages.\ndef proteome_length(self, query_proteome):\r\u0026quot;\u0026quot;\u0026quot; Reads a Pandas dataframe containing a proteome of interest; returns the total number of residues\rParameters\r----------\tquery_proteome : Pandas dataframe, contains the proteome of interest\rReturns\r-------\rtotal_length : int, total number of residues in proteome_dataframe \u0026quot;\u0026quot;\u0026quot; total_length = query_proteome['Length'][1:].sum(axis=0, skipna=True)\rreturn total_length\r \nThis function takes a proteome in a Pandas dataframe as input and returns the total number of residues in that proteome. To quickly count up the number of residues in the proteome, we can sum the Length column that we\u0026rsquo;ve already appended to our dataframe in the load_fasta function above. The argument \u0026ldquo;axis=0\u0026rdquo; is required to tell Pandas to sum down the column and not across the row.\nSo, now that we have the total number of residues in the proteome, let\u0026rsquo;s write a function to search the proteome for a specific motif. We want this function to output two values:\n  the total number of times that we counted the queried motif. Let\u0026rsquo;s call this value sum.\n  the observed number of motifs divided by the total number of peptides of size n in the proteome, or the fraction.\n  Because we are counting up motifs in a \u0026ldquo;sliding\u0026rdquo; manner, i.e. by starting at residue 1 and working our way toward the C-terminus, then we should also calculate how many peptides of size $n$ exist in a similar manner. For example, if our queried motif is \u0026ldquo;QVERY\u0026rdquo; then our denominator, $x$, becomes:\n$x = (N-n)+1$ where $N$ is the length of the proteome and $n$ is the length of the queried motif. (I encourage you to calculate this on your own using, e.g. $N$ = 10 and $n$ = 2. You\u0026rsquo;ll see that there exist 9 di-peptides when sliding from residue 1 to residue 10, i.e. 1-2, 2-3, 3-4, \u0026hellip; , 9-10).\ndef find_motifs(self, data_frame, query):\r\u0026quot;\u0026quot;\u0026quot; Searches a Pandas dataframe containing a proteome for a specific amino acid/motif; returns the number of instances and fraction\rParameters\r----------\tdata_frame : Pandas dataframe, contains the proteome of interest\rquery : str, the amino acid or motif to be searched\rReturns\r-------\rsum : int, total number of hits for the queried residue/motif\rfraction: float, sum divided by the total number of residues or motifs of the same size \u0026quot;\u0026quot;\u0026quot; # Extract sequences from the pandas dataframe\rseqs = data_frame['Sequence']\r# Calculate the total number of residues in the queried proteome\rtotal_residues = self.proteome_length(data_frame)\r# Initialize an array\rhits_array = []\r# Loop over each sequence and count the number of times the queried motif shows up\rfor protein in seqs:\rhits_array.append(protein.count(query))\r# total number of hits for the queried residue/motif, check if any hits are found\rsum = np.sum(np.asarray(hits_array)) if sum \u0026lt; 1:\rfraction = 0\relse:\rfraction = sum/(total_residues - len(query)+1) # total number of hits divided by the total number of residues or motifs of the same size\rreturn sum, fraction\r \nLet\u0026rsquo;s test out the code. We can quickly instantiate the class, load the FASTA file, and calculate the total length of the proteome.\n# Instantiate the class human = Proteome()\r# Load the FASTA file containing the human proteome uniprot = human.load_uniprot('uniprot_human.tab') # replace with the name of your .tab file\r# What is the length of the proteome?\rprint('Proteome length = %.0f AA' % human.proteome_length(uniprot))\r  Proteome length = 11354232 AA\n For the human proteome, we see that there are $N$ = 11,354,232 residues. So, for our example above with the motif \u0026ldquo;QVERY\u0026rdquo;, there are $x$ = (11,354,232 $-$ 5)+1 = 11,354,228 penta-peptides in the proteome.\nWith our new function find_motifs, we can also count how many particular motifs exist in the proteome.\n# Find how many Q, QV, QVE, QVER, QVERI, QVERIE, QVERIES\rmotif = 'QVERIES'\rfor i in range(0, len(motif)+1):\rprint('%s = %.0f' % (motif[0:i], human.find_motifs(uniprot, motif[0:i])[0]))\r   Q = 541533  QV = 31622  QVE = 2108\n QVER = 116\n QVERI = 6\n QVERIE = 2\n QVERIES = 0\n By iterating over the queried motif \u0026ldquo;QVERIES\u0026rdquo;, we see that the number of found motifs dramatically decreases with increasing length of the peptide. In fact, in the entire proteome comprising 11,354,226 hepta-peptides, there is not a single QVERIES motif to be found. We\u0026rsquo;ll return to this point a little later.\nWe now know that there are about 11.4 million amino acids in the proteome. Indeed, it would take some time to count motifs by hand\u0026hellip;! We can do some basic calculations with these numbers, and we find that the average length of a human protein is 558 residues, or ca 61 kDa (using an estimate of ca 110 Da per amino acid).\nWe can also compute this with numpy, where we obtain the same average length of 558 residues. The median length, however, is only 415 residues, and this reflects a skewed distribution.\n# What are the mean \u0026amp; median protein lengths in the proteome?\rmean = np.mean(uniprot['Length'][1:])\rmedian = np.median(uniprot['Length'][1:])\rprint('Mean protein length = %.0f AA' % mean)\rprint('Median protein length = %.0f AA' % median)\r   Mean protein length = 558 AA\n Median protein length = 415 AA\n We can plot a histogram of protein lengths to visualize the distribution over the proteome. I limited the x axis because the vast majority of proteins are fewer than 3000 residues. Indeed, we can see that our distribution of protein sizes (below) are skewed to the right with a tail.\n# Plot a histogram of sequence length plt.hist(uniprot['Length'][1:], bins=1000, color='k', edgecolor='w', linewidth=0.1)\rplt.title('Protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.tight_layout()\rplt.show()\r Histogram of protein lengths in the human proteome\r We can smooth out our distribution by applying a filter known as the Savitzky-Golay filter.\nfrom scipy.signal import savgol_filter\rdef filter(data_to_filter, window=19, poly=3):\r\u0026quot;\u0026quot;\u0026quot; Applys the Savitzky-Golay filter to a 1D array\rParameters\r----------\tdata_to_filter : dataframe or array, contains the data to be smoothed\rwindow : int, the length of the filter window\rpoly : int, the order of the polynomial (must be \u0026lt; window)\rReturns\r-------\rfiltered : array, the smoothed data \u0026quot;\u0026quot;\u0026quot; data = np.asarray(data_to_filter).astype(np.float64)\rfiltered = savgol_filter(data, window, poly)\rreturn filtered\r# Bin the data\rdata, bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=False)\r# Smooth the binned data\rfiltered_data = filter(data, window=19, poly=3)\r# Plot the histogram \u0026amp; the smoothed data\rplt.hist(uniprot['Length'][1:], bins=1000, color='k', edgecolor='w', linewidth=0.1, label='Original data')\rplt.plot(bins[:-1], filtered_data, 'r', label='Smoothed data')\rplt.title('Smoothed protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.ylim([0,None])\rplt.legend(loc='upper right')\rplt.tight_layout()\rplt.show()\r Smoothing the histogram with a Savitzky-Golay filter\rWe can also recover the histogram-style plot of our smoothed data by making use of the weights variable in the plt.hist function:\n# Plot our histogram as above\rplt.hist(uniprot['Length'][1:], bins=1000, density=False, color='k', alpha=0.5, edgecolor='w', linewidth=0.1, label='Original data')\r# Plot the smoothed data as a histogram by setting weights = filtered_data\rplt.hist(bins[:-1], bins=1000, weights = filtered_data, density=False, color='r', alpha=0.5, edgecolor='w', linewidth=0.1, label='Smoothed data')\r# These are the exact same plotting parameters as above\rplt.title('Smoothed protein size distribution in the human proteome')\rplt.ylabel('Count')\rplt.xlabel('Number of amino acids')\rplt.xlim(0,3000)\rplt.ylim([0,None])\rplt.legend(loc='upper right')\rplt.tight_layout()\rplt.show()\r Smoothing the histogram with a Savitzky-Golay filter and recovering the binned values\r Now that we\u0026rsquo;ve plotted our smoothed distribution, we can compare this to other organisms. Do humans, on average, have shorter or longer proteins that some model organisms like E. coli or S. cerevisiae? To test this, we can simply download the respective proteomes from UniProt using the steps outlined above. You can click these links to reach the E. coli proteome or the S. cerevisiae proteome that I used for the calculations below.\nFirst, we see from the UniProt download pages that these two proteomes are much smaller than the human proteome: E. coli and S. cerevisiae respectively contain ~4,400 and ~6,000 proteins, which pale in number compared to the ~20,400 found in humans. Thus, to plot these distributions on the same y-axis, we must set the density option to True in our histograms, which ensures that the area under the histogram sums to 1. This enables us to compare histograms on the same y axis.\nWe can set up our script to compare these distributions:\n# Instantiate the class human = Proteome()\r# Load the FASTA file containing the human proteome uniprot = human.load_uniprot('uniprot_human.tab') # replace with the name of your .tab file\recoli = human.load_uniprot('uniprot_ecoli_k12.tab')\ryeast = human.load_uniprot('uniprot_yeast.tab')\r# How many amino acids are in each proteome?\rprint('\\n')\rprint('Human has %.0f AA' % human.proteome_length(uniprot)) print('Yeast has %.0f AA' % human.proteome_length(yeast))\rprint('E coli has %.0f AA' % human.proteome_length(ecoli))\rprint('\\n')\r# What are the mean \u0026amp; median lengths of a protein in each proteome? print('Mean (median) human protein = %.0f AA (%.0f AA)' % (human.proteome_length(uniprot)/(len(uniprot['Length'][1:])), np.median(uniprot['Length'][1:])))\rprint('Mean (median) yeast protein = %.0f AA (%.0f AA)' % (human.proteome_length(yeast)/(len(yeast['Length'][1:])), np.median(yeast['Length'][1:])))\rprint('Mean (median) E coli protein = %.0f AA (%.0f AA)' % (human.proteome_length(ecoli)/(len(ecoli['Length'][1:])), np.median(ecoli['Length'][1:])))\r   Human has 11354232 AA\n Yeast has 2936363 AA\n E coli has 1354187 AA\n Mean (median) human protein = 558 AA (415 AA)\n Mean (median) yeast protein = 485 AA (396 AA)\n Mean (median) E coli protein = 309 AA (271 AA)\n From this analysis, we can see a couple of interesting features. First, the average human protein (558 AA) is longer than the average yeast protein (485 AA) and nearly twice as long the E. coli average (309 AA). Interestingly, however, the median protein sizes from human and yeast are roughly equivalent, which suggests that the human proteome has a long(er) tail that includes some very large proteins.\n Comparing the mean and median protein lengths across three different organisms\r # Plot the mean \u0026amp; median protein lengths in a bar graph fig = plt.figure(figsize=(6,4.5))\rax = fig.add_subplot(111)\rax.bar(1, human.proteome_length(uniprot)/(len(uniprot['Length'][1:])), color='k', label='Mean')\rax.bar(1.5, np.median(uniprot['Length'][1:]), color='w', edgecolor='grey', alpha=0.85, label='Median')\rax.bar(2.5, human.proteome_length(yeast)/(len(yeast['Length'][1:])), color='purple')\rax.bar(3, np.median(yeast['Length'][1:]), color='w', edgecolor='pink', alpha=0.85)\rax.bar(4, human.proteome_length(ecoli)/(len(ecoli['Length'][1:])), color='darkorange')\rax.bar(4.5, np.median(ecoli['Length'][1:]), color='w', edgecolor='yellow', alpha=0.85)\r# Axis labels, legend, and title\rax.set_ylabel('Number of amino acids')\rax.set_xlabel('Organism')\rax.legend(loc='upper right')\rax.set_title('Comparing mean \u0026amp; median protein lengths')\r# Tick positions \u0026amp; labels\rax.set_xticks([1.25, 2.75, 4.25])\rax.set_xticklabels(['Human', r'$S$. $cerevisiae$', r'$E$. $coli$'])\rplt.tight_layout()\rplt.show()\r We can also plot these data in histogram format as follows:\n Comparing the distributions of protein lengths for three different organisms\r # Get the bins from the human distribution\rhuman_dat, human_bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=True)\r# Plot the histograms using the same bins\rplt.hist(uniprot['Length'][1:], bins=human_bins, color='k', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$H$. $sapiens$', density=True)\rplt.hist(yeast['Length'][1:], bins=human_bins, color='purple', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$S$. $cerevisiae$', density=True)\rplt.hist(ecoli['Length'][1:], bins=human_bins, color='darkorange', alpha=0.3, edgecolor='w', linewidth=0.1, label=r'$E$. $coli$', density=True)\r# Set up the axis limits, title, and legend\rplt.xlim(0,3000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing protein length distributions')\rplt.legend(loc='upper right')\r# Plot\rplt.tight_layout()\rplt.show()\r or with our smoothing function:\n Comparing the smoothed distributions of protein lengths for three different organisms\r # Histogram the data using the same bins\rhuman_dat, human_bins = np.histogram(np.asarray(uniprot['Length'][1:]), bins=1000, density=True)\recoli_dat, ecoli_bins = np.histogram(np.asarray(ecoli['Length'][1:]), bins=human_bins, density=True)\ryeast_dat, yeast_bins = np.histogram(np.asarray(yeast['Length'][1:]), bins=human_bins, density=True)\r# Plot the smoothed data as lines plt.plot(human_bins[:-1], filter(human_dat), 'k-', label=r'$H$. $sapiens$')\rplt.plot(yeast_bins[:-1], filter(yeast_dat), '-', color='purple', label=r'$S$. $cerevisiae$')\rplt.plot(ecoli_bins[:-1], filter(ecoli_dat), '-', color='darkorange', label=r'$E$. $coli$')\r# Set up the axis limits, title, and legend\rplt.xlim(0,3000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing smoothed protein length distributions')\rplt.legend(loc='upper right')\r# Plot\rplt.tight_layout()\rplt.show()\r For me, it was surprising to see how much the yeast proteome resembles the human proteome! Maybe to an evolutionary biologist this would not be surprising; however, to a structural biologist like myself, I never would have guessed that the proteome of the tiny, single-celled S. cerevisiae could look so similar to humans. Alongside protein length, perhaps the hubristic tendencies of humans have also been evolutionarily conserved\u0026hellip;\n\nThe histograms above tell us three things:\n  there are many more small proteins in E. coli\n  proteins became significantly longer between the appearance of E. coli and that of S. cerevisiae\n  the distribution of protein lengths has not changed much between S. cerevisiae and humans.\n  Above we compared the protein length distribution of a prokaryote, E. coli, to two eukaryotes, the single-celled organism S. cerevisiae and far more complex H. sapiens. What do protein length distributions from other prokaryotes or archaea look like? How do proteins in human mitochondria compare?\nI downloaded the proteomes (using the above outline) from the following organisms:\n  Methanocaldococcus jannaschii (an archaeon)  Thermus thermophilus (a bacterium) Bacillus subtilis (a bacterium) and the mitochondrial proteome from Homo sapiens  The mitochondrial proteome was made available by The Broad Institute in their MitoCarta2.0 release, which can be found in the following publication.\n# Load the new proteomes\rmj = human.load_uniprot('m_jannaschii.tab')\rbs = human.load_uniprot('b_subtilis.tab')\rtt = human.load_uniprot('t_thermophilus.tab')\r# in order to load the mitochondrial proteome, we need a new function\r# that can read generic FASTA files and return a pandas dataframe\rdef load_fasta(self, fasta):\r\u0026quot;\u0026quot;\u0026quot; Reads a fasta file with identifiers (IDs) and sequences; returns a pandas dataframe\rParameters\r----------\tfasta : file in FASTA format with identifiers (e.g. \u0026gt;) and sequences Returns\r-------\rfasta_proteome, a Pandas dataframe that contains the FASTA IDs, sequences, and length of sequences \u0026quot;\u0026quot;\u0026quot;\r# Load the fasta file\rself.seq_list = SeqIO.index(fasta, \u0026quot;fasta\u0026quot;) # makes dictionary, but contains Seq objects\r# Create arrays to store the relevant information\rids = [] ; seqs = []\rfor key, value in self.seq_list.items():\rids.append(key)\rseqs.append(str(value.seq)) # string the Seq object go get only the sequence\r# Create a dictionary for subsequent conversion into a dataframe\rself.dictionary = {'ID':ids, 'Sequence':seqs} # Load the dictionary into a dataframe\rself.fasta_proteome = pd.DataFrame(self.dictionary) self.fasta_proteome['Length'] = self.fasta_proteome['Sequence'].str.len() # create column in the dataframe with sequence lengths\rself.fasta_proteome['Length'][1:] = self.fasta_proteome['Length'][1:].astype(int) # convert the length values to integers\rreturn self.fasta_proteome\r# now load the mitochondrial proteome using \u0026quot;load_fasta\u0026quot;\rmito = human.load_fasta('Human.MitoCarta2.0.fasta')\r Now that the data have been loaded into pandas dataframes, we can plot the smoothed protein length distributions. To speed things up, we can write a function:\ndef plot_list_hist(list_organisms, names):\r# get reference data\rref_dat, ref_bins = np.histogram(np.asarray(list_organisms[0]['Length'][1:]), bins=1000, density=True) # get reference bins for 1st item in list\r# make array data = np.zeros(shape=(len(list_organisms), len(ref_bins)-1))\rcolors = plt.cm.viridis(np.linspace(0.0, 1, len(list_organisms)))\r# loop and plot\rfig = plt.figure(figsize=(6,4.5))\rfor i, item in enumerate(list_organisms):\rdat, bins = np.histogram(np.asarray(item['Length'][1:]), bins=ref_bins, density=True)\rdata[i, :] = dat plt.plot(ref_bins[:-1], filter(dat), '-', label=names[i], color=colors[i])\rplt.xlim(0,2000)\rplt.ylabel('Density')\rplt.xlabel('Number of amino acids')\rplt.title('Comparing smoothed protein length distributions')\rplt.legend(loc='upper right')\rplt.tight_layout()\r#plt.show()\rreturn fig\r# create a list of data and data names\rdata = [uniprot, mito, ecoli, bs, tt, mj]\rdata_names = [r'$H$. $sapiens$', r'$H$. $sapiens$, $mito$', r'$E$. $coli$', r'$B$. $subtilis$', r'$T$. $thermophilus$', r'$M$. $jannaschii$']\r# use the \u0026quot;plot_list\u0026quot; function plot_list_hist(data, data_names)\rplt.show()\r  Comparing the smoothed distributions of protein lengths across organisms\r \nFrom this comparison, we can see that the mitochondrial proteome lies somewhere between the E. coli and human proteomes. Of course, our human proteome dataset also contains all of the mitochondrial proteins; so, had we selectively removed the ~1000 mitochondrial proteins from the human proteome, we would see a slightly more pronounced difference. Nevertheless, for proteins with fewer than 500 amino acids, the mitochondrial proteome looks more similar in terms of its length distribution to E. coli. For proteins longer than 500 residues, however, the long tail of the mitochondrial proteome bears more resemblance to human. Overall, these apparent differences may reflect the more ancient evolutionary origin of mitochondria: more smaller proteins than expected for the human proteome, but more larger proteins than expected for prokaryotes or archaea.\nFinally, we can also plot the mean and median protein lengths, as we did earlier. To make this a little faster, however, we can create a small loop:\n# create the figure\rfig = plt.figure(figsize=(6,4.5))\rax = fig.add_subplot(111)\r# create a list of colors using the colormaps package\rabbrv_names = ['HS', 'HS\\nmito', 'EC', 'BS', 'TT', 'MJ']\rcolors = plt.cm.viridis(np.linspace(0.0, 1, len(abbrv_names)))\r# initiate a counter and empty array (for xtick positions)\rcounter = 1\rxtick_list = []\r# now loop over the organisns\rfor i in range(len(abbrv_names)):\rif i == 0:\rax.bar(counter, human.proteome_length(orgs[i])/(len(orgs[i]['Length'][1:])), color=colors[i], label='Mean')\rax.bar(counter+0.5, np.median(orgs[i]['Length'][1:]), color='w', edgecolor=colors[i], alpha=0.85, label='Median')\relse:\rax.bar(counter, human.proteome_length(orgs[i])/(len(orgs[i]['Length'][1:])), color=colors[i])\rax.bar(counter+0.5, np.median(orgs[i]['Length'][1:]), color='w', edgecolor=colors[i], alpha=0.85) xtick_list.append(counter+0.25)\rcounter += 1\r# Axis labels \u0026amp; the legend\rax.set_ylabel('Number of amino acids')\rax.set_xlabel('Organism')\rax.legend(loc='upper right')\r# Tick positions \u0026amp; labels\rax.set_xticks(xtick_list)\rax.set_xticklabels(abbrv_names)\rax.set_title('Comparing mean \u0026amp; median protein lengths')\r#plt.xticks(rotation=0, fontsize=8)\rplt.tight_layout()\rplt.show()\r Comparing the mean and median protein lengths across organisms. The abbrevations are as follows: Homo sapiens (HS), mitochondrial (mito), E. coli (EC), Bacillus subtilis (BS), Thermus thermophilus (TT), Methanocaldococcus jannaschii (MJ). \rWe can clearly see that the median protein length in the mitochondria is ~100 residues smaller than the typical human protein. The difference in the means is even more pronounced, which reflects the very long tail in the human proteome (as discussed above).\nNext time, I\u0026rsquo;ll discuss how we can use Python to calculate biophysical properties from protein sequences, and how we can perform such calculations on the proteome scale.\n","date":1587325683,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587325683,"objectID":"51d07f5eaaa65f02638280b919d766ae","permalink":"/post/1/","publishdate":"2020-04-19T15:48:03-04:00","relpermalink":"/post/1/","section":"post","summary":"How to download proteomes from UniProt and analyze distributions of protein lengths. This allows for quick comparisons between different organisms.","tags":["bioinformatics","python","proteome"],"title":"Bioinformatics with Python, part 1","type":"post"},{"authors":[],"categories":["code","python","bioinformatics"],"content":"Some useful tools\rProtein Structures   \rProtein Data Bank (PDB)\n  \rPDB in Europe (PDBe)\n \rPDBe Proteins, Interfaces, Structures, and Assemblies (PISA) \u0026ndash; analyze oligomeric interfaces, interfacial residues, and buried surface area \rPDBeFold \u0026ndash; compute structural similarity     \rElectron Microscopy Data Bank (EMDB)\n  \rExPASY \u0026ndash; the Swiss Institute of Bioinformatics\u0026rsquo; resource portal, including many structural biology tools\n \rSWISS-MODEL \u0026ndash; homology modeling of protein structures    \rProtein Tools\n  \rConSurf\n  \rDALI \u0026ndash; web server to compare a protein structure against a database (\rreference)\n  \rProtein Contacts Atlas\n  \rPro-Origami \u0026ndash; to create protein topology cartoons (\rreference)\n  \rCATH\n  \rSuMo \u0026ndash; search for functional sites in protein structures\n  \rPISCES \u0026ndash; culling the PDB by resolution and sequence identity, compiled by the Roland Dunbrack Lab\n  \rPyRosetta \u0026ndash; interactive structural modeling with Rosetta combined with the Python programming language\n  \rSCOP \u0026ndash; structural classification of proteins\n  Amino Acid Sequences  \rVOLPES \u0026ndash; Visualization of Physicochemical Properties (\rreference)  http://sosnick.uchicago.edu/gdmcl.html\nhttps://github.com/harmslab/pdbtools\n  \rUniProt BLAST ClustalOmega Ensembl OMIM COSMIC  Expasy ProtParam Expasy  ","date":1587325683,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587325683,"objectID":"50f4a3afa91a908cc91ff7c23bdf1acb","permalink":"/resources/1/","publishdate":"2020-04-19T15:48:03-04:00","relpermalink":"/resources/1/","section":"resources","summary":" here is some text ...","tags":["bioinformatics","python","proteome"],"title":"Proteins","type":"resources"},{"authors":[],"categories":[],"content":" How do molecular chaperones recognize their substrate proteins? What mechanisms regulate the activity of molecular chaperones? How do disease-causing mutations and post-translational modifications remodel the conformational landscapes?  Molecular chaperones maintain cellular homeostasis by binding to and stabilizing partially or completely unfolded proteins. By preventing unwanted protein aggregation mediated by exposed hydrophobic residues, molecular chaperones can \u0026hellip;\n","date":1587304837,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587304837,"objectID":"99e517d8286dae09f1b46c063b5c76fd","permalink":"/project/chaperones/","publishdate":"2020-04-19T10:00:37-04:00","relpermalink":"/project/chaperones/","section":"project","summary":"How do molecular chaperones function? What regulates their activity?","tags":[],"title":"Chaperones","type":"project"},{"authors":[],"categories":[],"content":" How do molecular chaperones recognize their substrate proteins? What mechanisms regulate the activity of molecular chaperones? How do disease-causing mutations and post-translational modifications remodel the conformational landscapes?  Molecular chaperones maintain cellular homeostasis by binding to and stabilizing partially or completely unfolded proteins. By preventing unwanted protein aggregation mediated by exposed hydrophobic residues, molecular chaperones can \u0026hellip;\n","date":1587304837,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587304837,"objectID":"bf2e0057a6a21530d5c7b2ede133e257","permalink":"/project/nmr/","publishdate":"2020-04-19T10:00:37-04:00","relpermalink":"/project/nmr/","section":"project","summary":"Applying new NMR methods to characterize protein structures and dynamics","tags":[],"title":"NMR","type":"project"},{"authors":[],"categories":[],"content":" How do molecular chaperones recognize their substrate proteins? What mechanisms regulate the activity of molecular chaperones? How do disease-causing mutations and post-translational modifications remodel the conformational landscapes?  Molecular chaperones maintain cellular homeostasis by binding to and stabilizing partially or completely unfolded proteins. By preventing unwanted protein aggregation mediated by exposed hydrophobic residues, molecular chaperones can \u0026hellip;\n","date":1587304837,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587304837,"objectID":"192f0ab333b7dfe99e739929cc510ee6","permalink":"/project/protein_folding/","publishdate":"2020-04-19T10:00:37-04:00","relpermalink":"/project/protein_folding/","section":"project","summary":"What can NMR tell us about the ways that proteins fold and misfold?","tags":[],"title":"Protein folding","type":"project"},{"authors":["Iva Pritišanac","**T. Reid Alderson**","Peter Güntert"],"categories":null,"content":"","date":1585699200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1585699200,"objectID":"e07e926963dc56862f63695d2d41905d","permalink":"/publication/19_review_pnmrs/","publishdate":"2020-04-17T02:29:27.564271Z","relpermalink":"/publication/19_review_pnmrs/","section":"publication","summary":"As structural biology trends towards larger and more complex biomolecular targets, a detailed understanding of their interactions and underlying structures and dynamics is required. The development of methyl-TROSY has enabled NMR spectroscopy to provide atomic-resolution insight into the mechanisms of large molecular assemblies in solution. However, the applicability of methyl-TROSY has been hindered by the laborious and time-consuming resonance assignment process, typically performed with the help of domain fragmentation, site-directed mutagenesis, and analysis of NOE data in the context of a crystal structure, or combinations thereof. In response, several structure-based automatic methyl assignment strategies have been developed over the past decade. Here, we present a comprehensive analysis of all available methods and compare their input data requirements, algorithmic strategies, and reported performance. In general, the methods fall into two categories: those that primarily rely on inter-methyl NOEs, and those that utilize methyl PRE- and PCS-based restraints. We discuss their advantages and limitations, and highlight the potential benefits from standardizing and combining different methods.","tags":["Automatic methyl resonance assignment","computational","methyl-TROSY\"","NMR spectroscopy","software","National Institutes of Health"],"title":"Automated assignment of methyl NMR spectra from large proteins","type":"publication"},{"authors":["Venkat Ramanujam\u0026#8750;","**T. Reid Alderson**","Iva Pritišanac","Jinfa Ying","Ad Bax"],"categories":null,"content":"\n1/2 If you\u0026#39;re interested in #NMR and how biomolecular motions regulate function and contribute to dysfunction, then please read our new review in @CellPressNews! https://t.co/HZCwOAriYc\n\u0026mdash; Reid Alderson (@ReidAlderson) February 4, 2021 ","date":1583020800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1583020800,"objectID":"bfc9b2352cceec632cca4d1beb0cd128","permalink":"/publication/18_diffusion_jmr/","publishdate":"2020-04-16T19:22:39.628672Z","relpermalink":"/publication/18_diffusion_jmr/","section":"publication","summary":"NMR spectroscopy is widely used to measure the translational diffusion and hydrodynamic radius (Rh) of biomolecules in solution. For unfolded proteins, the Rh provides a sensitive reporter on the ensemble-averaged conformation and the extent of polypeptide chain expansion as a function of added denaturant. Hydrostatic pressure is a convenient and reversible alternative to chemical denaturants for the study of protein folding, and enables NMR measurements to be performed on a single sample. While the impact of pressure on the viscosity of water is well known, and our water diffusivity measurements agree closely with theoretical expectations, we find that elevated pressures increase the Rh of dioxane and other small molecules by amounts that correlate with their hydrophobicity, with parallel increases in rotational friction indicated by 13C longitudinal relaxation times. These data point to a tighter coupling with water for hydrophobic surfaces at elevated pressures. Translational diffusion measurement of the unfolded state of a pressure-sensitized ubiquitin mutant (VA2-ubiquitin) as a function of hydrostatic pressure or urea concentration shows that Rh values of both the folded and the unfolded states remain nearly invariant. At ca 23 Å, the Rh of the fully pressure-denatured state is essentially indistinguishable from the urea-denatured state, and close to the value expected for an idealized random coil of 76 residues. The intrinsically disordered protein (IDP) $α$-synuclein shows slight compaction at pressures above 2 kbar. Diffusion of unfolded ubiquitin and $α$-synuclein is significantly impacted by sample concentration, indicating that quantitative measurements need to be carried out under dilute conditions.","tags":["Dioxane","Hydration layer","IDP","Pressure-induced unfolding","Protein compaction","Radius of hydration","Random coil","Self-diffusion","Translational diffusion","Ubiquitin","Unfolded chain","Urea","$α$-synuclein","National Institutes of Health"],"title":"Protein structural changes characterized by high-pressure, pulsed field gradient diffusion NMR spectroscopy","type":"publication"},{"authors":["**T. Reid Alderson**","Jinfa Ying","Ad Bax","Justin L. P. Benesch","Andrew J. Baldwin"],"categories":null,"content":"Today\u0026#39;s a 2-for-1! Please also see at our new @JMolBiol paper from the @BeneschResearch group. We used #NMR to study a monomeric domain of the small heat-shock protein HSP27. We found that the monomer has partially unfolded in its interfacial region.https://t.co/stYqsE2Udi\n\u0026mdash; Reid Alderson (@ReidAlderson) February 19, 2020 ","date":1581897600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581897600,"objectID":"5818d9b45a1432653b5ef55337948648","permalink":"/publication/17_hsp27_jmb/","publishdate":"2020-04-16T19:22:39.630666Z","relpermalink":"/publication/17_hsp27_jmb/","section":"publication","summary":"Small heat-shock proteins (sHSPs) are molecular chaperones that respond to cellular stresses to combat protein aggregation. HSP27 is a critical human sHSP that forms large, dynamic oligomers whose quaternary structures and chaperone activities depend on environmental factors. Upon exposure to cellular stresses, such as heat shock or acidosis, HSP27 oligomers can dissociate into dimers and monomers, which leads to significantly enhanced chaperone activity. The structured core of the protein, the $α$-crystallin domain (ACD), forms dimers and can prevent the aggregation of substrate proteins to a similar degree as the full-length protein. When the ACD dimer dissociates into monomers, it partially unfolds and exhibits enhanced activity. Here, we used solution-state NMR spectroscopy to characterize the structure and dynamics of the HSP27 ACD monomer. Web show that the monomer is stabilized at low pH and that its backbone chemical shifts, 15N relaxation rates, and 1H–15N residual dipolar couplings suggest structural changes and rapid motions in the region responsible for dimerization. By analyzing the solvent accessible and buried surface areas of sHSP structures in the context of a database of dimers that are known to dissociate into disordered monomers, we predict that ACD dimers from sHSPs across all kingdoms of life may partially unfold upon dissociation. We propose a general model in which conditional disorder—the partial unfolding of ACDs upon monomerization—is a common mechanism for sHSP activity.","tags":["backbone dynamics","HSP27","molecular chaperones","NMR spectroscopy","PDBePISA","relaxation","residual dipolar couplings","small heat-shock proteins","National Institutes of Health"],"title":"Conditional Disorder in Small Heat-shock Proteins","type":"publication"},{"authors":["**T. Reid Alderson**","Lewis E. Kay"],"categories":null,"content":"Check out our new @COSB_CRSB review on invisible protein states studied by #NMR https://t.co/ekaE3ajWOW pic.twitter.com/Mz4emuHxGr\n\u0026mdash; Reid Alderson (@ReidAlderson) December 14, 2019 ","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"e7132b9a6f26b4c2cf6361ddd6f71111","permalink":"/publication/16_invisible_states_cosb/","publishdate":"2020-01-16T19:22:39.632662Z","relpermalink":"/publication/16_invisible_states_cosb/","section":"publication","summary":"Proteins interconvert between multiple conformations, including sparsely populated and transiently formed states that are difficult to characterize in structural detail using standard biophysical methods. In some cases, changes to the dynamical equilibria between conformations can lead to pathological protein aggregation and to the disruption of cellular homeostasis. The detection and characterization of lowly populated conformers is therefore crucial for understanding the basis of protein misfolding. NMR spectroscopy is exquisitely sensitive to the conformational dynamics of biomolecules and can be used to study sparsely populated states at the atomic level. Here, we review recent progress toward understanding the roles of sparsely populated, otherwise ‘invisible' states present in protein folding and misfolding, where NMR has provided unique insight into folding intermediates, transiently misfolded states, and soluble oligomers that precede amyloid fibril formation.\n","tags":["NMR","Protein folding","CPMG relaxation dispersion","CEST"],"title":"Unveiling invisible protein states with NMR spectroscopy","type":"publication"},{"authors":["Iva Pritišanac","Julia M. Würz","**T. Reid Alderson**","Peter Güntert"],"categories":null,"content":"\r\r\r\u0026ldquo;\u0026gt;. @NatureComms Automatic structure-based NMR methyl resonance assignment in large proteins, Iva Pritišanac, Julia M. Würz, T. Reid Alderson \u0026amp; Peter Güntert* Goethe University Frankfurt am Main https://t.co/3aVFYt58OQ #NMRchat #NMR\n— Victor Terskikh (@nmr900) October 29, 2019 \n","date":1572307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572307200,"objectID":"2969a9108ea7a4cffe02657e9a80d984","permalink":"/publication/15_methylflya_natcomm/","publishdate":"2020-04-16T19:22:39.640705Z","relpermalink":"/publication/15_methylflya_natcomm/","section":"publication","summary":"Isotopically labeled methyl groups provide NMR probes in large, otherwise deuterated proteins. However, the resonance assignment constitutes a bottleneck for broader applicability of methyl-based NMR. Here, we present the automated MethylFLYA method for the assignment of methyl groups that is based on methyl-methyl nuclear Overhauser effect spectroscopy (NOESY) peak lists. MethylFLYA is applied to five proteins (28–358 kDa) comprising a total of 708 isotope-labeled methyl groups, of which 612 contribute NOESY cross peaks. MethylFLYA confidently assigns 488 methyl groups, i.e. 80% of those with NOESY data. Of these, 459 agree with the reference, 6 were different, and 23 were without reference assignment. MethylFLYA assigns significantly more methyl groups than alternative algorithms, has an average error rate of 1%, modest runtimes of 0.4–1.2 h, and can handle arbitrary isotope labeling patterns and data from other types of NMR spectra.","tags":["Automatic methyl resonance assignment","computational","methyl-TROSY","NMR spectroscopy","software","National Institutes of Health"],"title":"Automatic structure-based NMR methyl resonance assignment in large proteins","type":"publication"},{"authors":["Miranda P. Collier","**T. Reid Alderson**","Carin P. de Villiers","Daisy Nicholls","Heidi Y. Gastall","Timothy M. Allison","Matteo T. Degiacomi","He Jiang","Georg Mlynek","Dieter O. Fürst","Peter F. M. van der Ven","Kristina Djinovic-Carugo","Andrew J. Baldwin","Hugh Watkins","Katja Gehmlich","Justin L. P. Benesch"],"categories":null,"content":"Really thrilled to see ⁦@mirandacollier⁩ ‘s paper on mechanosensitive molecular chaperone interactions out! Raises interesting questions about what constitutes stress on the molecular level https://t.co/UBIKDUrQGh\n\u0026mdash; Justin Benesch (@BeneschResearch) May 22, 2019 ","date":1558483200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558483200,"objectID":"d26b5663ec5813cab5d36447cdcbca77","permalink":"/publication/14_hsp27_sciadv/","publishdate":"2020-04-17T02:19:37.659187Z","relpermalink":"/publication/14_hsp27_sciadv/","section":"publication","summary":"Mechanical force–induced conformational changes in proteins underpin a variety of physiological functions, typified in muscle contractile machinery. Mutations in the actin-binding protein filamin C (FLNC) are linked to musculoskeletal pathologies characterized by altered biomechanical properties and sometimes aggregates. HspB1, an abundant molecular chaperone, is prevalent in striated muscle where it is phosphorylated in response to cues including mechanical stress. We report the interaction and up-regulation of both proteins in three mouse models of biomechanical stress, with HspB1 being phosphorylated and FLNC being localized to load-bearing sites. We show how phosphorylation leads to increased exposure of the residues surrounding the HspB1 phosphosite, facilitating their binding to a compact multidomain region of FLNC proposed to have mechanosensing functions. Steered unfolding of FLNC reveals that its extension trajectory is modulated by the phosphorylated region of HspB1. This may represent a posttranslationally regulated chaperone-client protection mechanism targeting over-extension during mechanical stress.","tags":["HSP27","molecular chaperones","NMR spectroscopy","native MS","phosphorylation","post-translational modification","small heat-shock proteins","X-ray crystallography","University of Oxford"],"title":"HspB1 phosphorylation regulates its intramolecular dynamics and mechanosensitive molecular chaperone interaction with filamin C","type":"publication"},{"authors":["**T. Reid Alderson**","Julien Roche","Heidi Y. Gastall","David M. Dias","Iva Pritišanac","Jinfa Ying","Ad Bax","Justin L. P. Benesch","Andrew J. Baldwin"],"categories":null,"content":"\r\r\rGreat to see @ReidAlderson ’s paper published today - he used #NMR to obtain the first structure of a #sHSP monomer. https://t.co/RshCilMe7Z\n\u0026mdash; Justin Benesch (@BeneschResearch) March 6, 2019  ","date":1551830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551830400,"objectID":"842b575ef9028f33002f729bd3db3bdb","permalink":"/publication/13_hsp27_natcomm/","publishdate":"2020-04-16T19:22:39.63871Z","relpermalink":"/publication/13_hsp27_natcomm/","section":"publication","summary":"The small heat-shock protein HSP27 is a redox-sensitive molecular chaperone that is expressed throughout the human body. Here, we describe redox-induced changes to the structure, dynamics, and function of HSP27 and its conserved $α$-crystallin domain (ACD). While HSP27 assembles into oligomers, we show that the monomers formed upon reduction are highly active chaperones in vitro, but are susceptible to self-aggregation. By using relaxation dispersion and high-pressure nuclear magnetic resonance (NMR) spectroscopy, we observe that the pair of $β$-strands that mediate dimerisation partially unfold in the monomer. We note that numerous HSP27 mutations associated with inherited neuropathies cluster to this dynamic region. High levels of sequence conservation in ACDs from mammalian sHSPs suggest that the exposed, disordered interface present in free monomers or oligomeric subunits may be a general, functional feature of sHSPs.","tags":["HSP27","high pressure","molecular chaperones","NMR spectroscopy","native MS","small heat-shock proteins","University of Oxford"],"title":"Local unfolding of the HSP27 monomer regulates chaperone activity","type":"publication"},{"authors":["Cyril Charlier","Joseph M. Courtney","**T. Reid Alderson**","Philip Anfinrud","Ad Bax"],"categories":null,"content":"\r\r\r","date":1530748800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530748800,"objectID":"39039bb8c7615331d72ba645cf663220","permalink":"/publication/12_pressure-jump_jacs/","publishdate":"2020-04-16T19:22:39.645691Z","relpermalink":"/publication/12_pressure-jump_jacs/","section":"publication","summary":"Pressure-jump hardware permits direct observation of protein NMR spectra during a cyclically repeated protein folding process. For a two-state folding protein, the change in resonance frequency will occur nearly instantaneously when the protein clears the transition state barrier, resulting in a monoexponential change of the ensemble-averaged chemical shift. However, protein folding pathways can be more complex and contain metastable intermediates. With a pseudo-3D NMR experiment that utilizes stroboscopic observation, we measure the ensemble-averaged chemical shifts, including those of exchange-broadened intermediates, during the folding process. Such measurements for a pressure-sensitized mutant of ubiquitin show an on-pathway kinetic intermediate whose 15N chemical shifts differ most from the natively folded protein for strands $β$5, its preceding turn, and the two strands that pair with $β$5 in the native structure.","tags":["folding intermediate","high pressure","NMR spectroscopy","protein folding","ubiquitin","National Institutes of Health"],"title":"Monitoring 15N Chemical Shifts during Protein Folding by Pressure-Jump NMR","type":"publication"},{"authors":["Cyril Charlier","**T. Reid Alderson**","Joseph M. Courtney","Jinfa Ying","Philip Anfinrud","Ad Bax"],"categories":null,"content":"\r\r\rPressure control helps #NMR analyze protein as it folds: https://t.co/QKFbgJQBRf pic.twitter.com/uoCl9Ldt5Z\n\u0026mdash; C\u0026amp;EN (@cenmag) April 23, 2018 ","date":1525132800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1525132800,"objectID":"a064bf6250fe919091cef3c95153d5a8","permalink":"/publication/11_pressure-jump_pnas/","publishdate":"2020-04-16T19:22:39.641701Z","relpermalink":"/publication/11_pressure-jump_pnas/","section":"publication","summary":"In general, small proteins rapidly fold on the timescale of milliseconds or less. For proteins with a substantial volume difference between the folded and unfolded states, their thermodynamic equilibrium can be altered by varying the hydrostatic pressure. Using a pressure-sensitized mutant of ubiquitin, we demonstrate that rapidly switching the pressure within an NMR sample cell enables study of the unfolded protein under native conditions and, vice versa, study of the native protein under denaturing conditions. This approach makes it possible to record 2D and 3D NMR spectra of the unfolded protein at atmospheric pressure, providing residue-specific information on the folding process. 15N and 13C chemical shifts measured immediately after dropping the pressure from 2.5 kbar (favoring unfolding) to 1 bar (native) are close to the random-coil chemical shifts observed for a large, disordered peptide fragment of the protein. However, 15N relaxation data show evidence for rapid exchange, on a ∼100-$μ$s timescale, between the unfolded state and unstable, structured states that can be considered as failed folding events. The NMR data also provide direct evidence for parallel folding pathways, with approximately one-half of the protein molecules efficiently folding through an on-pathway kinetic intermediate, whereas the other half fold in a single step. At protein concentrations above ∼300 $μ$M, oligomeric off-pathway intermediates compete with folding of the native state.","tags":["folding intermediate","high pressure","NMR spectroscopy","protein folding","ubiquitin","National Institutes of Health"],"title":"Study of protein folding under native conditions by rapidly switching the hydrostatic pressure inside an NMR sample cell","type":"publication"},{"authors":["**T. Reid Alderson**","Jung Ho Lee","Cyril Charlier","Jinfa Ying","Ad Bax"],"categories":null,"content":"\r\r\rAlso on a protein folding-related note, check out our work on cis-Proline measurements in unfolded proteins published in @ChemBioChem last November https://t.co/UjreKetoMi\n\u0026mdash; Reid Alderson (@ReidAlderson) April 16, 2018 ","date":1515024000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1515024000,"objectID":"f90f6816260c1e6367814f43097d7daa","permalink":"/publication/10_cis-pro_chembiochem/","publishdate":"2020-04-16T19:22:39.643696Z","relpermalink":"/publication/10_cis-pro_chembiochem/","section":"publication","summary":"In unfolded proteins, peptide bonds involving Pro residues exist in equilibrium between the minor cis and major trans conformations. Folded proteins predominantly contain trans-Pro bonds, and slow cis–trans Pro isomerization in the unfolded state is often found to be a rate-limiting step in protein folding. Moreover, kinases and phosphatases that act upon Ser/Thr−Pro motifs exhibit preferential recognition of either the cis- or trans-Pro conformer. Here, NMR spectra obtained at both atmospheric and high pressures indicate that the population of cis-Pro falls well below previous estimates, an effect attributed to the use of short peptides with charged termini in most prior model studies. For the intrinsically disordered protein $α$-synuclein, cis-Pro populations at all of its five X−Pro bonds are less than 5 %, with only modest ionic strength dependence and no detectable effect of the previously demonstrated interaction between the N- and C-terminal halves of the protein. Comparison to small peptides with the same amino-acid sequence indicates that peptides, particularly those with unblocked, oppositely charged amino and carboxyl end groups, strongly overestimate the amount of cis-Pro.","tags":["alpha-synuclein","cis-trans proline isomerization","high pressure","HSP27","NMR spectroscopy","protein folding","ubiquitin","National Institutes of Health"],"title":"Propensity for cis-Proline Formation in Unfolded Proteins","type":"publication"},{"authors":["**T. Reid Alderson**","Cyril Charlier","Dennis A. Torchia","Philip Anfinrud","Ad Bax"],"categories":null,"content":"\r\r\r","date":1502841600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1502841600,"objectID":"11e04032b15ef1901164f51032405594","permalink":"/publication/9_pressure-jump_hx_jacs/","publishdate":"2020-04-16T19:22:39.64968Z","relpermalink":"/publication/9_pressure-jump_hx_jacs/","section":"publication","summary":"A method is introduced that permits direct observation of the rates at which backbone amide hydrogens become protected from solvent exchange after rapidly dropping the hydrostatic pressure inside the NMR sample cell from denaturing (2.5 kbar) to native (1 bar) conditions. The method is demonstrated for a pressure-sensitized ubiquitin variant that contains two Val to Ala mutations. Increased protection against hydrogen exchange with solvent is monitored as a function of time during the folding process. Results for 53 backbone amides show narrow clustering with protection occurring with a time constant of ca. 85 ms, but slower protection is observed around a reverse turn near the C-terminus of the protein. Remarkably, the native NMR spectrum returns with this slower time constant of ca. 150 ms, indicating that the almost fully folded protein retains molten globule characteristics with severe NMR line broadening until the final hydrogen bonds are formed. Prior to crossing the transition state barrier, hydrogen exchange protection factors are close to unity, but with slightly elevated values in the $β$1-$β$2 hairpin, previously shown to be already lowly populated in the urea-denatured state.","tags":["folding","high pressure","hydrogen exchange","NMR spectroscopy","pressure-jump NMR","ubiquitin","National Institutes of Health"],"title":"Monitoring Hydrogen Exchange during Protein Folding by Fast Pressure Jump NMR Spectroscopy","type":"publication"},{"authors":["Iva Pritišanac","Matteo T. Degiacomi","**T. Reid Alderson**","Marta G. Carneiro","Eiso Ab","Gregg Siegal","Andrew J. Baldwin"],"categories":null,"content":"\r\r\r","date":1501372800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1501372800,"objectID":"dea526f9ce07f6c904e8c1b43c1e2156","permalink":"/publication/8_magma_jacs/","publishdate":"2020-04-16T19:22:39.647686Z","relpermalink":"/publication/8_magma_jacs/","section":"publication","summary":"Methyl groups are powerful probes for the analysis of structure, dynamics and function of supramolecular assemblies, using both solution- and solid-state NMR. Widespread application of the methodology has been limited due to the challenges associated with assigning spectral resonances to specific locations within a biomolecule. Here, we present Methyl Assignment by Graph Matching (MAGMA), for the automatic assignment of methyl resonances. A graph matching protocol examines all possibilities for each resonance in order to determine an exact assignment that includes a complete description of any ambiguity. MAGMA gives 100% accuracy in confident assignments when tested against both synthetic data, and 9 cross-validated examples using both solution- and solid-state NMR data. We show that this remarkable accuracy enables a user to distinguish between alternative protein structures. In a drug discovery application on HSP90, we show the method can rapidly and efficiently distinguish between possible ligand binding modes. By providing an exact and robust solution to methyl resonance assignment, MAGMA can facilitate significantly accelerated studies of supramolecular machines using methyl-based NMR spectroscopy.","tags":["Automatic methyl resonance assignment","computational","methyl-TROSY","NMR spectroscopy","software","University of Oxford"],"title":"Automatic Assignment of Methyl-NMR Spectra of Supramolecular Machines Using Graph Theory","type":"publication"},{"authors":["**T. Reid Alderson**","Justin L. P. Benesch","Andrew J. Baldwin"],"categories":null,"content":"\r\r\r","date":1500681600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1500681600,"objectID":"6953d69b87e3cdf34f5583e56827328d","permalink":"/publication/7_hsp27_cis-pro_csc/","publishdate":"2020-04-16T19:22:39.651675Z","relpermalink":"/publication/7_hsp27_cis-pro_csc/","section":"publication","summary":"In mammals, small heat-shock proteins (sHSPs) typically assemble into interconverting, polydisperse oligomers. The dynamic exchange of sHSP oligomers is regulated, at least in part, by molecular interactions between the $α$-crystallin domain and the C-terminal region (CTR). Here we report solution-state nuclear magnetic resonance (NMR) spectroscopy investigations of the conformation and dynamics of the disordered and flexible CTR of human HSP27, a systemically expressed sHSP. We observed multiple NMR signals for residues in the vicinity of proline 194, and we determined that, while all observed forms are highly disordered, the extra resonances arise from cis-trans peptidyl-prolyl isomerization about the G193-P194 peptide bond. The cis-P194 state is populated to near 15% at physiological temperatures, and, although both cis- and trans-P194 forms of the CTR are flexible and dynamic, both states show a residual but differing tendency to adopt $β$-strand conformations. In NMR spectra of an isolated CTR peptide, we observed similar evidence for isomerization involving proline 182, found within the IPI/V motif. Collectively, these data indicate a potential role for cis-trans proline isomerization in regulating the oligomerization of sHSPs.","tags":["Intrinsically disordered proteins","molecular chaperones","NMR spectroscopy","small heat-shock proteins","cis-trans proline isomerization","University of Oxford"],"title":"Proline isomerization in the C-terminal region of HSP27","type":"publication"},{"authors":["**T. Reid Alderson**","Jin Hae Kim","John L. Markley"],"categories":null,"content":"\r\r\r","date":1467763200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1467763200,"objectID":"c84ef4558dcd37a780f6796e765abca6","permalink":"/publication/6_hsp70_review_structure/","publishdate":"2020-04-16T19:22:39.652672Z","relpermalink":"/publication/6_hsp70_review_structure/","section":"publication","summary":"Protein misfolding and aggregation are pathological events that place a significant amount of stress on the maintenance of protein homeostasis (proteostasis). For prevention and repair of protein misfolding and aggregation, cells are equipped with robust mechanisms that mainly rely on molecular chaperones. Two classes of molecular chaperones, heat shock protein 70 kDa (Hsp70) and Hsp40, recognize and bind to misfolded proteins, preventing their toxic biomolecular aggregation and enabling refolding or targeted degradation. Here, we review the current state of structural biology of Hsp70 and Hsp40-Hsp70 complexes and examine the link between their structures, dynamics, and functions. We highlight the power of nuclear magnetic resonance spectroscopy to untangle complex relationships behind molecular chaperones and their mechanism(s) of action.","tags":["Molecular chaperones","NMR spectroscopy","Hsp70","Hsp40","protein-protein interaction","UW-Madison"],"title":"Dynamical Structures of Hsp70 and Hsp70-Hsp40 Complexes","type":"publication"},{"authors":["**T. Reid Alderson**","Ad Bax"],"categories":null,"content":"\r\r\r","date":1454544000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1454544000,"objectID":"6a11a1ffed5f296c03025011c428ad98","permalink":"/publication/5_synuclein_nature/","publishdate":"2020-04-16T19:22:39.654667Z","relpermalink":"/publication/5_synuclein_nature/","section":"publication","summary":"The native structure of the protein $α$-synuclein, which is implicated in Parkinson's disease, is controversial. In-cell nuclear magnetic resonance now shows that it remains disordered when loaded into living cells.","tags":["intrinsically disordered proteins","$α$-synuclein","amyloid fibrils","NMR","in-cell NMR","National Institutes of Health"],"title":"Parkinson's disease: Disorder in the court","type":"publication"},{"authors":["Jin Hae Kim","Jameson R. Bothe","**T. Reid Alderson**","John L. Markley"],"categories":null,"content":"\r\r\r","date":1433116800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1433116800,"objectID":"323d9fdf5bf1f71879d357285a77c976","permalink":"/publication/4_fe-s_review_bba/","publishdate":"2020-04-16T19:22:39.656662Z","relpermalink":"/publication/4_fe-s_review_bba/","section":"publication","summary":"Proteins containing iron-sulfur (Fe-S) clusters arose early in evolution and are essential to life. Organisms have evolved machinery consisting of specialized proteins that operate together to assemble Fe-S clusters efficiently so as to minimize cellular exposure to their toxic constituents: iron and sulfide ions. To date, the best studied system is the iron-sulfur cluster (isc) operon of Escherichia coli, and the eight ISC proteins it encodes. Our investigations over the past five years have identified two functional conformational states for the scaffold protein (IscU) and have shown that the other ISC proteins that interact with IscU prefer to bind one conformational state or the other. From analyses of the NMR spectroscopy-derived network of interactions of ISC proteins, small-angle X-ray scattering (SAXS) data, chemical crosslinking experiments, and functional assays, we have constructed working models for Fe-S cluster assembly and delivery. Future work is needed to validate and refine what has been learned about the E. coli system and to extend these findings to the homologous Fe-S cluster biosynthetic machinery of yeast and human mitochondria. This article is part of a Special Issue entitled: Fe/S proteins: Analysis, structure, function, biogenesis and diseases.","tags":["Conformational equilibria","iron-sulfur cluster biogenesis","NMR spectroscopy","protein-protein interaction","Small-angle X-ray scattering (SAXS)","UW-Madison"],"title":"Tangled web of interactions among proteins involved in iron-sulfur cluster assembly as unraveled by NMR, SAXS, chemical crosslinking, and functional studies","type":"publication"},{"authors":["**T. Reid Alderson**","Jin Hae Kim","Kai Cai","Ronnie O. Frederick","Marco Tonelli","John L. Markley"],"categories":null,"content":"\r\r\r","date":1416873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1416873600,"objectID":"333b51f02a392c211ea93ec8a8551fb3","permalink":"/publication/3_hsca_biochemistry/","publishdate":"2020-04-16T19:22:39.658657Z","relpermalink":"/publication/3_hsca_biochemistry/","section":"publication","summary":"Proteins from the isc operon of Escherichia coli constitute the machinery used to synthesize iron-sulfur (Fe-S) clusters for delivery to recipient apoproteins. Efficient and rapid [2Fe-2S] cluster transfer from the holo-scaffold protein IscU depends on ATP hydrolysis in the nucleotide-binding domain (NBD) of HscA, a specialized Hsp70-type molecular chaperone with low intrinsic ATPase activity (0.02 min-1 at 25 °C, henceforth reported in units of min-1). HscB, an Hsp40-type cochaperone, binds to HscA and stimulates ATP hydrolysis to promote cluster transfer, yet while the interactions between HscA and HscB have been investigated, the role of HscA's interdomain linker in modulating ATPase activity has not been explored. To address this issue, we created three variants of the 40 kDa NBD of HscA: NBD alone (HscA386), NBD with a partial linker (HscA389), and NBD with the full linker (HscA395). We found that the rate of ATP hydrolysis of HscA395 (0.45 min-1) is nearly 15-fold higher than that of HscA 386 (0.035 min-1), although their apparent affinities for ATP are equivalent. HscA395, which contains the full covalently linked linker peptide, exhibited intrinsic tryptophan fluorescence emission and basal thermostability that were higher than those of HscA386. Furthermore, HscA395 displayed narrower 1HN line widths in its two-dimensional 1H-15N TROSY-HSQC spectrum in comparison to HscA386, indicating that the peptide in the cis configuration binds to and stabilizes the structure of the NBD. The addition to HscA386 of a synthetic peptide with a sequence identical to that of the interdomain linker (L387LLDVIPLS395) stimulated its ATPase activity and induced widespread NMR chemical shift perturbations indicative of a binding interaction in the trans configuration.","tags":["Molecular chaperones","NMR spectroscopy","Hsp70","interdomain linker","ATPase","iron-sulfur cluster biogenesis","UW-Madison"],"title":"The specialized Hsp70 (HscA) interdomain linker binds to its nucleotide-binding domain and stimulates ATP hydrolysis in both cis and trans configurations","type":"publication"},{"authors":["Jin Hae Kim","**T. Reid Alderson**","Ronnie O. Frederick","John L. Markley"],"categories":null,"content":"\r\r\r","date":1406851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1406851200,"objectID":"72911a3cb2600b9dbf1c0e0be91d03f9","permalink":"/publication/2_hscb_jacs/","publishdate":"2014-08-01T00:00:00Z","relpermalink":"/publication/2_hscb_jacs/","section":"publication","summary":"The structural mechanism by which Hsp70-type chaperones interact with Hsp40-type co-chaperones has been of great interest, yet still remains a matter of debate. Here, we used solution NMR spectroscopy to investigate the ATP-/ADP-dependent interactions between Escherichia coli HscA and HscB, the specialized Hsp70/Hsp40 molecular chaperones that mediate iron-sulfur cluster transfer. We observed that NMR signals assigned to amino acid residues in the J-domain and its HPD motif of HscB broadened severely upon the addition of ATP-bound HscA, but these signals were not similarly broadened by ADP-bound HscA or the isolated nucleotide binding domain of HscA complexed with either ATP or ADP. An HscB variant with an altered HPD motif, HscB(H32A,P33A,D34A), failed to manifest WT-like NMR signal perturbations and also abolished WT-like stimulation of ATP hydrolysis by HscA. In addition, residues 153-171 in the C-terminal region of HscB exhibited NMR signal perturbations upon interaction with HscA, alone or complexed with ADP or ATP. These results demonstrate that the HPD motif in the J-domain of HscB directly interacts with ATP-bound HscA and suggest that a second, less nucleotide-dependent binding site for HscA resides in the C-terminal region of HscB.","tags":["Molecular chaperones","NMR spectroscopy","Hsp70","Hsp40","protein-protein interaction","iron-sulfur cluster biogenesis","UW-Madison"],"title":"Nucleotide-dependent interactions within a specialized Hsp70/Hsp40 complex involved in Fe-S cluster biogenesis","type":"publication"},{"authors":["Jin Hae Kim","**T. Reid Alderson**","Ronnie O. Frederick","John L. Markley"],"categories":null,"content":"\r\r\r","date":1406851200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1406851200,"objectID":"2e2e8acee465191d4f2a3b6c577e1c11","permalink":"/test/2_hscb_jacs/","publishdate":"2014-08-01T00:00:00Z","relpermalink":"/test/2_hscb_jacs/","section":"test","summary":"The structural mechanism by which Hsp70-type chaperones interact with Hsp40-type co-chaperones has been of great interest, yet still remains a matter of debate. Here, we used solution NMR spectroscopy to investigate the ATP-/ADP-dependent interactions between Escherichia coli HscA and HscB, the specialized Hsp70/Hsp40 molecular chaperones that mediate iron-sulfur cluster transfer. We observed that NMR signals assigned to amino acid residues in the J-domain and its HPD motif of HscB broadened severely upon the addition of ATP-bound HscA, but these signals were not similarly broadened by ADP-bound HscA or the isolated nucleotide binding domain of HscA complexed with either ATP or ADP. An HscB variant with an altered HPD motif, HscB(H32A,P33A,D34A), failed to manifest WT-like NMR signal perturbations and also abolished WT-like stimulation of ATP hydrolysis by HscA. In addition, residues 153-171 in the C-terminal region of HscB exhibited NMR signal perturbations upon interaction with HscA, alone or complexed with ADP or ATP. These results demonstrate that the HPD motif in the J-domain of HscB directly interacts with ATP-bound HscA and suggest that a second, less nucleotide-dependent binding site for HscA resides in the C-terminal region of HscB.","tags":["Molecular chaperones","NMR spectroscopy","Hsp70","Hsp40","protein-protein interaction","iron-sulfur cluster biogenesis","UW-Madison"],"title":"Nucleotide-dependent interactions within a specialized Hsp70/Hsp40 complex involved in Fe-S cluster biogenesis","type":"test"},{"authors":["**T. Reid Alderson**","John L. Markley"],"categories":null,"content":"","date":1377216000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1377216000,"objectID":"01ac9c79f56436bb97b32275a03ad108","permalink":"/publication/1_synuclein_idps/","publishdate":"2020-04-16T19:22:39.661648Z","relpermalink":"/publication/1_synuclein_idps/","section":"publication","summary":"$α$-synuclein, a presynaptic protein of poorly defined function, constitutes the main component of Parkinson disease-associated Lewy bodies. Extensive biophysical investigations have provided evidence that isolated $α$-synuclein is an intrinsically disordered protein (IDP) in vitro. Subsequently serving as a model IDP in numerous studies, $α$-synuclein has aided in the development of many technologies used to characterize IDPs and arguably represents the most thoroughly analyzed IDP to date. Recent reports, however, have challenged the disordered nature of $α$-synuclein inside cells and have instead proposed a physiologically relevant helical tetramer. Despite $α$-synuclein's rich biophysical history, a single coherent picture has not yet emerged concerning its in vivo structure, dynamics, and physiological role(s). We present herein a review of the biophysical discoveries, developments, and models pertinent to the characterization of $α$-synuclein's structure and analysis of the native tetramer controversy.\n","tags":["Intrinsically disordered proteins","$α$-synuclein","Amyloid fibrils","NMR","in-cell NMR"],"title":"Biophysical characterization of $α$-synuclein and its controversial structure","type":"publication"},{"authors":["**T. Reid Alderson**","John L. Markley"],"categories":null,"content":"","date":1377216000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1377216000,"objectID":"cd9b1c05706b37ee0e4eae558f6d1491","permalink":"/test/1_synuclein_idps/","publishdate":"2020-04-16T19:22:39.661648Z","relpermalink":"/test/1_synuclein_idps/","section":"test","summary":"$α$-synuclein, a presynaptic protein of poorly defined function, constitutes the main component of Parkinson disease-associated Lewy bodies. Extensive biophysical investigations have provided evidence that isolated $α$-synuclein is an intrinsically disordered protein (IDP) in vitro. Subsequently serving as a model IDP in numerous studies, $α$-synuclein has aided in the development of many technologies used to characterize IDPs and arguably represents the most thoroughly analyzed IDP to date. Recent reports, however, have challenged the disordered nature of $α$-synuclein inside cells and have instead proposed a physiologically relevant helical tetramer. Despite $α$-synuclein's rich biophysical history, a single coherent picture has not yet emerged concerning its in vivo structure, dynamics, and physiological role(s). We present herein a review of the biophysical discoveries, developments, and models pertinent to the characterization of $α$-synuclein's structure and analysis of the native tetramer controversy.\n","tags":["Intrinsically disordered proteins","$α$-synuclein","Amyloid fibrils","NMR","in-cell NMR"],"title":"Biophysical characterization of $α$-synuclein and its controversial structure","type":"test"}]